{
  "version": 3,
  "sources": ["../../ace-builds/src-noconflict/ext-beautify.js"],
  "sourcesContent": ["ace.define(\"ace/ext/beautify\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\"], function(require, exports, module){// [WIP]\n\"use strict\";\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\nexports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\nexports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\nexports.formatOptions = {\n    lineBreaksAfterCommasInCurlyBlock: true\n};\nexports.beautify = function (session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var tabString = session.getTabString();\n    var singletonTags = exports.singletonTags;\n    var blockTags = exports.blockTags;\n    var formatOptions = exports.formatOptions || {};\n    var nextToken;\n    var breakBefore = false;\n    var spaceBefore = false;\n    var spaceAfter = false;\n    var code = \"\";\n    var value = \"\";\n    var tagName = \"\";\n    var depth = 0;\n    var lastDepth = 0;\n    var lastIndent = 0;\n    var indent = 0;\n    var unindent = 0;\n    var roundDepth = 0;\n    var curlyDepth = 0;\n    var row;\n    var curRow = 0;\n    var rowsToAdd = 0;\n    var rowTokens = [];\n    var abort = false;\n    var i;\n    var indentNextLine = false;\n    var inTag = false;\n    var inCSS = false;\n    var inBlock = false;\n    var levels = { 0: 0 };\n    var parents = [];\n    var caseBody = false;\n    var trimNext = function () {\n        if (nextToken && nextToken.value && nextToken.type !== 'string.regexp')\n            nextToken.value = nextToken.value.replace(/^\\s*/, \"\");\n    };\n    var trimLine = function () {\n        var end = code.length - 1;\n        while (true) {\n            if (end == 0)\n                break;\n            if (code[end] !== \" \")\n                break;\n            end = end - 1;\n        }\n        code = code.slice(0, end + 1);\n    };\n    var trimCode = function () {\n        code = code.trimRight();\n        breakBefore = false;\n    };\n    while (token !== null) {\n        curRow = iterator.getCurrentTokenRow();\n        rowTokens = iterator.$rowTokens;\n        nextToken = iterator.stepForward();\n        if (typeof token !== \"undefined\") {\n            value = token.value;\n            unindent = 0;\n            inCSS = (tagName === \"style\" || session.$modeId === \"ace/mode/css\");\n            if (is(token, \"tag-open\")) {\n                inTag = true;\n                if (nextToken)\n                    inBlock = (blockTags.indexOf(nextToken.value) !== -1);\n                if (value === \"</\") {\n                    if (inBlock && !breakBefore && rowsToAdd < 1)\n                        rowsToAdd++;\n                    if (inCSS)\n                        rowsToAdd = 1;\n                    unindent = 1;\n                    inBlock = false;\n                }\n            }\n            else if (is(token, \"tag-close\")) {\n                inTag = false;\n            }\n            else if (is(token, \"comment.start\")) {\n                inBlock = true;\n            }\n            else if (is(token, \"comment.end\")) {\n                inBlock = false;\n            }\n            if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\n                rowsToAdd++;\n            }\n            if (curRow !== row) {\n                rowsToAdd = curRow;\n                if (row)\n                    rowsToAdd -= row;\n            }\n            if (rowsToAdd) {\n                trimCode();\n                for (; rowsToAdd > 0; rowsToAdd--)\n                    code += \"\\n\";\n                breakBefore = true;\n                if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/))\n                    value = value.trimLeft();\n            }\n            if (value) {\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\n                    parents[depth] = value;\n                    trimNext();\n                    spaceAfter = true;\n                    if (value.match(/^(else|elseif)$/)) {\n                        if (code.match(/\\}[\\s]*$/)) {\n                            trimCode();\n                            spaceBefore = true;\n                        }\n                    }\n                }\n                else if (token.type === \"paren.lparen\") {\n                    trimNext();\n                    if (value.substr(-1) === \"{\") {\n                        spaceAfter = true;\n                        indentNextLine = false;\n                        if (!inTag)\n                            rowsToAdd = 1;\n                    }\n                    if (value.substr(0, 1) === \"{\") {\n                        spaceBefore = true;\n                        if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\n                            trimCode();\n                            spaceBefore = false;\n                        }\n                        else if (code.trimRight().substr(-1) === ')') {\n                            trimCode();\n                        }\n                        else {\n                            trimLine();\n                        }\n                    }\n                }\n                else if (token.type === \"paren.rparen\") {\n                    unindent = 1;\n                    if (value.substr(0, 1) === \"}\") {\n                        if (parents[depth - 1] === 'case')\n                            unindent++;\n                        if (code.trimRight().substr(-1) === '{') {\n                            trimCode();\n                        }\n                        else {\n                            spaceBefore = true;\n                            if (inCSS)\n                                rowsToAdd += 2;\n                        }\n                    }\n                    if (value.substr(0, 1) === \"]\") {\n                        if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n                    if (value.substr(0, 1) === \")\") {\n                        if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n                    trimLine();\n                }\n                else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\n                    trimCode();\n                    trimNext();\n                    spaceBefore = true;\n                    spaceAfter = true;\n                }\n                else if (token.type === \"punctuation.operator\" && value === ';') {\n                    trimCode();\n                    trimNext();\n                    spaceAfter = true;\n                    if (inCSS)\n                        rowsToAdd++;\n                }\n                else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\n                    trimCode();\n                    trimNext();\n                    if (value.match(/^(,)$/) && curlyDepth > 0 && roundDepth === 0 && formatOptions.lineBreaksAfterCommasInCurlyBlock) {\n                        rowsToAdd++;\n                    }\n                    else {\n                        spaceAfter = true;\n                        breakBefore = false;\n                    }\n                }\n                else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\n                    trimCode();\n                    spaceBefore = true;\n                }\n                else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\n                    spaceBefore = true;\n                }\n                else if (is(token, \"attribute-equals\")) {\n                    trimLine();\n                    trimNext();\n                }\n                else if (is(token, \"tag-close\")) {\n                    trimLine();\n                    if (value === \"/>\")\n                        spaceBefore = true;\n                }\n                else if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n                    if (caseBody)\n                        unindent = 1;\n                }\n                if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"@]$/))) {\n                    indent = lastIndent;\n                    if (depth > lastDepth) {\n                        indent++;\n                        for (i = depth; i > lastDepth; i--)\n                            levels[i] = indent;\n                    }\n                    else if (depth < lastDepth)\n                        indent = levels[depth];\n                    lastDepth = depth;\n                    lastIndent = indent;\n                    if (unindent)\n                        indent -= unindent;\n                    if (indentNextLine && !roundDepth) {\n                        indent++;\n                        indentNextLine = false;\n                    }\n                    for (i = 0; i < indent; i++)\n                        code += tabString;\n                }\n                if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n                    if (caseBody === false) {\n                        parents[depth] = value;\n                        depth++;\n                        caseBody = true;\n                    }\n                }\n                else if (token.type === \"keyword\" && value.match(/^(break)$/)) {\n                    if (parents[depth - 1] && parents[depth - 1].match(/^(case|default)$/)) {\n                        depth--;\n                        caseBody = false;\n                    }\n                }\n                if (token.type === \"paren.lparen\") {\n                    roundDepth += (value.match(/\\(/g) || []).length;\n                    curlyDepth += (value.match(/\\{/g) || []).length;\n                    depth += value.length;\n                }\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\n                    indentNextLine = true;\n                    roundDepth = 0;\n                }\n                else if (!roundDepth && value.trim() && token.type !== \"comment\")\n                    indentNextLine = false;\n                if (token.type === \"paren.rparen\") {\n                    roundDepth -= (value.match(/\\)/g) || []).length;\n                    curlyDepth -= (value.match(/\\}/g) || []).length;\n                    for (i = 0; i < value.length; i++) {\n                        depth--;\n                        if (value.substr(i, 1) === '}' && parents[depth] === 'case') {\n                            depth--;\n                        }\n                    }\n                }\n                if (token.type == \"text\")\n                    value = value.replace(/\\s+$/, \" \");\n                if (spaceBefore && !breakBefore) {\n                    trimLine();\n                    if (code.substr(-1) !== \"\\n\")\n                        code += \" \";\n                }\n                code += value;\n                if (spaceAfter)\n                    code += \" \";\n                breakBefore = false;\n                spaceBefore = false;\n                spaceAfter = false;\n                if ((is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1)) || (is(token, \"doctype\") && value === \">\")) {\n                    if (inBlock && nextToken && nextToken.value === \"</\")\n                        rowsToAdd = -1;\n                    else\n                        rowsToAdd = 1;\n                }\n                if (nextToken && singletonTags.indexOf(nextToken.value) === -1) {\n                    if (is(token, \"tag-open\") && value === \"</\") {\n                        depth--;\n                    }\n                    else if (is(token, \"tag-open\") && value === \"<\") {\n                        depth++;\n                    }\n                    else if (is(token, \"tag-close\") && value === \"/>\") {\n                        depth--;\n                    }\n                }\n                if (is(token, \"tag-name\")) {\n                    tagName = value;\n                }\n                row = curRow;\n            }\n        }\n        token = nextToken;\n    }\n    code = code.trim();\n    session.doc.setValue(code);\n};\nexports.commands = [{\n        name: \"beautify\",\n        description: \"Format selection (Beautify)\",\n        exec: function (editor) {\n            exports.beautify(editor.session);\n        },\n        bindKey: \"Ctrl-Shift-B\"\n    }];\n\n});                (function() {\n                    ace.require([\"ace/ext/beautify\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],
  "mappings": "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",
  "names": ["require", "exports", "module"]
}
