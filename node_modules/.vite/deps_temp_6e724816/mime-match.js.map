{
  "version": 3,
  "sources": ["../../wildcard/index.js", "../../mime-match/index.js"],
  "sourcesContent": ["/* jshint node: true */\n'use strict';\n\n/**\n  # wildcard\n\n  Very simple wildcard matching, which is designed to provide the same\n  functionality that is found in the\n  [eve](https://github.com/adobe-webplatform/eve) eventing library.\n\n  ## Usage\n\n  It works with strings:\n\n  <<< examples/strings.js\n\n  Arrays:\n\n  <<< examples/arrays.js\n\n  Objects (matching against keys):\n\n  <<< examples/objects.js\n\n  While the library works in Node, if you are are looking for file-based\n  wildcard matching then you should have a look at:\n\n  <https://github.com/isaacs/node-glob>\n**/\n\nfunction WildcardMatcher(text, separator) {\n  this.text = text = text || '';\n  this.hasWild = ~text.indexOf('*');\n  this.separator = separator;\n  this.parts = text.split(separator);\n}\n\nWildcardMatcher.prototype.match = function(input) {\n  var matches = true;\n  var parts = this.parts;\n  var ii;\n  var partsCount = parts.length;\n  var testParts;\n\n  if (typeof input == 'string' || input instanceof String) {\n    if (!this.hasWild && this.text != input) {\n      matches = false;\n    } else {\n      testParts = (input || '').split(this.separator);\n      for (ii = 0; matches && ii < partsCount; ii++) {\n        if (parts[ii] === '*')  {\n          continue;\n        } else if (ii < testParts.length) {\n          matches = parts[ii] === testParts[ii];\n        } else {\n          matches = false;\n        }\n      }\n\n      // If matches, then return the component parts\n      matches = matches && testParts;\n    }\n  }\n  else if (typeof input.splice == 'function') {\n    matches = [];\n\n    for (ii = input.length; ii--; ) {\n      if (this.match(input[ii])) {\n        matches[matches.length] = input[ii];\n      }\n    }\n  }\n  else if (typeof input == 'object') {\n    matches = {};\n\n    for (var key in input) {\n      if (this.match(key)) {\n        matches[key] = input[key];\n      }\n    }\n  }\n\n  return matches;\n};\n\nmodule.exports = function(text, test, separator) {\n  var matcher = new WildcardMatcher(text, separator || /[\\/\\.]/);\n  if (typeof test != 'undefined') {\n    return matcher.match(test);\n  }\n\n  return matcher;\n};\n", "var wildcard = require('wildcard');\nvar reMimePartSplit = /[\\/\\+\\.]/;\n\n/**\n  # mime-match\n\n  A simple function to checker whether a target mime type matches a mime-type\n  pattern (e.g. image/jpeg matches image/jpeg OR image/*).\n\n  ## Example Usage\n\n  <<< example.js\n\n**/\nmodule.exports = function(target, pattern) {\n  function test(pattern) {\n    var result = wildcard(pattern, target, reMimePartSplit);\n\n    // ensure that we have a valid mime type (should have two parts)\n    return result && result.length >= 2;\n  }\n\n  return pattern ? test(pattern.split(';')[0]) : test;\n};\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AA8BA,aAAS,gBAAgB,MAAM,WAAW;AACxC,WAAK,OAAO,OAAO,QAAQ;AAC3B,WAAK,UAAU,CAAC,KAAK,QAAQ,GAAG;AAChC,WAAK,YAAY;AACjB,WAAK,QAAQ,KAAK,MAAM,SAAS;AAAA,IACnC;AAEA,oBAAgB,UAAU,QAAQ,SAAS,OAAO;AAChD,UAAI,UAAU;AACd,UAAI,QAAQ,KAAK;AACjB,UAAI;AACJ,UAAI,aAAa,MAAM;AACvB,UAAI;AAEJ,UAAI,OAAO,SAAS,YAAY,iBAAiB,QAAQ;AACvD,YAAI,CAAC,KAAK,WAAW,KAAK,QAAQ,OAAO;AACvC,oBAAU;AAAA,QACZ,OAAO;AACL,uBAAa,SAAS,IAAI,MAAM,KAAK,SAAS;AAC9C,eAAK,KAAK,GAAG,WAAW,KAAK,YAAY,MAAM;AAC7C,gBAAI,MAAM,EAAE,MAAM,KAAM;AACtB;AAAA,YACF,WAAW,KAAK,UAAU,QAAQ;AAChC,wBAAU,MAAM,EAAE,MAAM,UAAU,EAAE;AAAA,YACtC,OAAO;AACL,wBAAU;AAAA,YACZ;AAAA,UACF;AAGA,oBAAU,WAAW;AAAA,QACvB;AAAA,MACF,WACS,OAAO,MAAM,UAAU,YAAY;AAC1C,kBAAU,CAAC;AAEX,aAAK,KAAK,MAAM,QAAQ,QAAQ;AAC9B,cAAI,KAAK,MAAM,MAAM,EAAE,CAAC,GAAG;AACzB,oBAAQ,QAAQ,MAAM,IAAI,MAAM,EAAE;AAAA,UACpC;AAAA,QACF;AAAA,MACF,WACS,OAAO,SAAS,UAAU;AACjC,kBAAU,CAAC;AAEX,iBAAS,OAAO,OAAO;AACrB,cAAI,KAAK,MAAM,GAAG,GAAG;AACnB,oBAAQ,GAAG,IAAI,MAAM,GAAG;AAAA,UAC1B;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU,SAAS,MAAM,MAAM,WAAW;AAC/C,UAAI,UAAU,IAAI,gBAAgB,MAAM,aAAa,QAAQ;AAC7D,UAAI,OAAO,QAAQ,aAAa;AAC9B,eAAO,QAAQ,MAAM,IAAI;AAAA,MAC3B;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;;;AC5FA;AAAA;AAAA,QAAI,WAAW;AACf,QAAI,kBAAkB;AAatB,WAAO,UAAU,SAAS,QAAQ,SAAS;AACzC,eAAS,KAAKA,UAAS;AACrB,YAAI,SAAS,SAASA,UAAS,QAAQ,eAAe;AAGtD,eAAO,UAAU,OAAO,UAAU;AAAA,MACpC;AAEA,aAAO,UAAU,KAAK,QAAQ,MAAM,GAAG,EAAE,CAAC,CAAC,IAAI;AAAA,IACjD;AAAA;AAAA;",
  "names": ["pattern"]
}
