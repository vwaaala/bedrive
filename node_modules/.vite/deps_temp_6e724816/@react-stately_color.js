import {
  $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5
} from "./chunk-BB6N34U7.js";
import {
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $9446cca9a3875146$export$7d15b64cf5a3a4c4,
  $9446cca9a3875146$export$b6268554fba451f,
  $9446cca9a3875146$export$cb6e0bb50bc19463
} from "./chunk-OFDJSAJI.js";
import {
  require_react
} from "./chunk-ZVH3J77E.js";
import {
  __toESM
} from "./chunk-J32WSRGE.js";

// node_modules/@react-stately/color/dist/ar-AE.mjs
var $2d805fd52bb48883$exports = {};
$2d805fd52bb48883$exports = {
  "alpha": `ألفا`,
  "blue": `أزرق`,
  "brightness": `السطوع`,
  "green": `أخضر`,
  "hue": `درجة اللون`,
  "lightness": `الإضاءة`,
  "red": `أحمر`,
  "saturation": `التشبع`
};

// node_modules/@react-stately/color/dist/bg-BG.mjs
var $6c28468dc1df643c$exports = {};
$6c28468dc1df643c$exports = {
  "alpha": `Алфа`,
  "blue": `Синьо`,
  "brightness": `Яркост`,
  "green": `Зелено`,
  "hue": `Оттенък`,
  "lightness": `Лекота`,
  "red": `Червено`,
  "saturation": `Наситеност`
};

// node_modules/@react-stately/color/dist/cs-CZ.mjs
var $807554f8230db0ed$exports = {};
$807554f8230db0ed$exports = {
  "alpha": `Alfa`,
  "blue": `Modrá`,
  "brightness": `Jas`,
  "green": `Zelená`,
  "hue": `Odstín`,
  "lightness": `Světlost`,
  "red": `Červená`,
  "saturation": `Sytost`
};

// node_modules/@react-stately/color/dist/da-DK.mjs
var $7097f64386f1761c$exports = {};
$7097f64386f1761c$exports = {
  "alpha": `Alfa`,
  "blue": `Blå`,
  "brightness": `Lysstyrke`,
  "green": `Grøn`,
  "hue": `Tone`,
  "lightness": `Lyshed`,
  "red": `Rød`,
  "saturation": `Farvemætning`
};

// node_modules/@react-stately/color/dist/de-DE.mjs
var $bdd847d8beb08799$exports = {};
$bdd847d8beb08799$exports = {
  "alpha": `Alpha`,
  "blue": `Blau`,
  "brightness": `Helligkeit`,
  "green": `Grün`,
  "hue": `Farbton`,
  "lightness": `Leuchtkraft`,
  "red": `Rot`,
  "saturation": `Sättigung`
};

// node_modules/@react-stately/color/dist/el-GR.mjs
var $a53e00b683950971$exports = {};
$a53e00b683950971$exports = {
  "alpha": `Άλφα`,
  "blue": `Μπλε`,
  "brightness": `Φωτεινότητα`,
  "green": `Πράσινο`,
  "hue": `Τόνος`,
  "lightness": `Φωτεινότητα`,
  "red": `Κόκκινο`,
  "saturation": `Κορεσμός`
};

// node_modules/@react-stately/color/dist/en-US.mjs
var $21cdd87e84f28d89$exports = {};
$21cdd87e84f28d89$exports = {
  "hue": `Hue`,
  "saturation": `Saturation`,
  "lightness": `Lightness`,
  "brightness": `Brightness`,
  "red": `Red`,
  "green": `Green`,
  "blue": `Blue`,
  "alpha": `Alpha`
};

// node_modules/@react-stately/color/dist/es-ES.mjs
var $92fee9698e4d675a$exports = {};
$92fee9698e4d675a$exports = {
  "alpha": `Alpha`,
  "blue": `Azul`,
  "brightness": `Brillo`,
  "green": `Verde`,
  "hue": `Tono`,
  "lightness": `Luminosidad`,
  "red": `Rojo`,
  "saturation": `Saturación`
};

// node_modules/@react-stately/color/dist/et-EE.mjs
var $7ea012e91a5ad3ee$exports = {};
$7ea012e91a5ad3ee$exports = {
  "alpha": `Alfa`,
  "blue": `Sinine`,
  "brightness": `Heledus`,
  "green": `Roheline`,
  "hue": `Värv`,
  "lightness": `Valgus`,
  "red": `Punane`,
  "saturation": `Küllastus`
};

// node_modules/@react-stately/color/dist/fi-FI.mjs
var $8460c13bb2d75345$exports = {};
$8460c13bb2d75345$exports = {
  "alpha": `Alpha`,
  "blue": `Sininen`,
  "brightness": `Kirkkaus`,
  "green": `Vihreä`,
  "hue": `Sävy`,
  "lightness": `Valomäärä`,
  "red": `Punainen`,
  "saturation": `Värikylläisyys`
};

// node_modules/@react-stately/color/dist/fr-FR.mjs
var $2a2d5dc14e680587$exports = {};
$2a2d5dc14e680587$exports = {
  "alpha": `Alpha`,
  "blue": `Bleu`,
  "brightness": `Luminosité`,
  "green": `Vert`,
  "hue": `Teinte`,
  "lightness": `Luminosité`,
  "red": `Rouge`,
  "saturation": `Saturation`
};

// node_modules/@react-stately/color/dist/he-IL.mjs
var $9a3f292371bb0589$exports = {};
$9a3f292371bb0589$exports = {
  "alpha": `אלפא`,
  "blue": `כחול`,
  "brightness": `בהירות`,
  "green": `ירוק`,
  "hue": `גוון`,
  "lightness": `כמות אור`,
  "red": `אדום`,
  "saturation": `רוויה`
};

// node_modules/@react-stately/color/dist/hr-HR.mjs
var $4742231a685fa068$exports = {};
$4742231a685fa068$exports = {
  "alpha": `Alfa`,
  "blue": `Plava`,
  "brightness": `Svjetlina`,
  "green": `Zelena`,
  "hue": `Nijansa`,
  "lightness": `Osvijetljenost`,
  "red": `Crvena`,
  "saturation": `Zasićenost`
};

// node_modules/@react-stately/color/dist/hu-HU.mjs
var $05e247fd2960981e$exports = {};
$05e247fd2960981e$exports = {
  "alpha": `Alfa`,
  "blue": `Kék`,
  "brightness": `Fényesség`,
  "green": `Zöld`,
  "hue": `Színárnyalat`,
  "lightness": `Világosság`,
  "red": `Piros`,
  "saturation": `Telítettség`
};

// node_modules/@react-stately/color/dist/it-IT.mjs
var $a67524a79ccbe190$exports = {};
$a67524a79ccbe190$exports = {
  "alpha": `Alfa`,
  "blue": `Blu`,
  "brightness": `Luminosità`,
  "green": `Verde`,
  "hue": `Tonalità`,
  "lightness": `Luminosità`,
  "red": `Rosso`,
  "saturation": `Saturazione`
};

// node_modules/@react-stately/color/dist/ja-JP.mjs
var $a9eefe9d6c8cb7d5$exports = {};
$a9eefe9d6c8cb7d5$exports = {
  "alpha": `アルファ`,
  "blue": `青`,
  "brightness": `明るさ`,
  "green": `緑`,
  "hue": `色相`,
  "lightness": `明度`,
  "red": `赤`,
  "saturation": `彩度`
};

// node_modules/@react-stately/color/dist/ko-KR.mjs
var $4a6b836d4f1bfaba$exports = {};
$4a6b836d4f1bfaba$exports = {
  "alpha": `알파`,
  "blue": `파랑`,
  "brightness": `명도`,
  "green": `초록`,
  "hue": `색조`,
  "lightness": `밝기`,
  "red": `빨강`,
  "saturation": `채도`
};

// node_modules/@react-stately/color/dist/lt-LT.mjs
var $c950e4b1c482abde$exports = {};
$c950e4b1c482abde$exports = {
  "alpha": `Alfa`,
  "blue": `Mėlyna`,
  "brightness": `Ryškumas`,
  "green": `Žalia`,
  "hue": `Atspalvis`,
  "lightness": `Šviesumas`,
  "red": `Raudona`,
  "saturation": `Įsotinimas`
};

// node_modules/@react-stately/color/dist/lv-LV.mjs
var $d10d6b60dc50b438$exports = {};
$d10d6b60dc50b438$exports = {
  "alpha": `Alfa`,
  "blue": `Zila`,
  "brightness": `Spilgtums`,
  "green": `Zaļa`,
  "hue": `Nokrāsa`,
  "lightness": `Gaišums`,
  "red": `Sarkana`,
  "saturation": `Piesātinājums`
};

// node_modules/@react-stately/color/dist/nb-NO.mjs
var $371a732b2494f452$exports = {};
$371a732b2494f452$exports = {
  "alpha": `Alfa`,
  "blue": `Blå`,
  "brightness": `Lysstyrke`,
  "green": `Grønn`,
  "hue": `Fargetone`,
  "lightness": `Lyshet`,
  "red": `Rød`,
  "saturation": `Metning`
};

// node_modules/@react-stately/color/dist/nl-NL.mjs
var $6d042cae6243464b$exports = {};
$6d042cae6243464b$exports = {
  "alpha": `Alfa`,
  "blue": `Blauw`,
  "brightness": `Helderheid`,
  "green": `Groen`,
  "hue": `Kleurtoon`,
  "lightness": `Lichtsterkte`,
  "red": `Rood`,
  "saturation": `Verzadiging`
};

// node_modules/@react-stately/color/dist/pl-PL.mjs
var $d9ab5c2611e0bcd3$exports = {};
$d9ab5c2611e0bcd3$exports = {
  "alpha": `Alfa`,
  "blue": `Niebieski`,
  "brightness": `Jasność`,
  "green": `Zielony`,
  "hue": `Odcień`,
  "lightness": `Jaskrawość`,
  "red": `Czerwony`,
  "saturation": `Nasycenie`
};

// node_modules/@react-stately/color/dist/pt-BR.mjs
var $73f77c9902e29ca6$exports = {};
$73f77c9902e29ca6$exports = {
  "alpha": `Alfa`,
  "blue": `Azul`,
  "brightness": `Brilho`,
  "green": `Verde`,
  "hue": `Matiz`,
  "lightness": `Luminosidade`,
  "red": `Vermelho`,
  "saturation": `Saturação`
};

// node_modules/@react-stately/color/dist/pt-PT.mjs
var $4f461eb266a95c10$exports = {};
$4f461eb266a95c10$exports = {
  "alpha": `Alfa`,
  "blue": `Azul`,
  "brightness": `Luminosidade`,
  "green": `Verde`,
  "hue": `Tonalidade`,
  "lightness": `Claridade`,
  "red": `Vermelho`,
  "saturation": `Saturação`
};

// node_modules/@react-stately/color/dist/ro-RO.mjs
var $dc46bea2f2597899$exports = {};
$dc46bea2f2597899$exports = {
  "alpha": `Alfa`,
  "blue": `Albastru`,
  "brightness": `Luminozitate`,
  "green": `Verde`,
  "hue": `Nuanță`,
  "lightness": `Luminozitate`,
  "red": `Roșu`,
  "saturation": `Saturație`
};

// node_modules/@react-stately/color/dist/ru-RU.mjs
var $622bbd6719cc95af$exports = {};
$622bbd6719cc95af$exports = {
  "alpha": `Альфа`,
  "blue": `Синий`,
  "brightness": `Яркость`,
  "green": `Зеленый`,
  "hue": `Оттенок`,
  "lightness": `Освещенность`,
  "red": `Красный`,
  "saturation": `Насыщенность`
};

// node_modules/@react-stately/color/dist/sk-SK.mjs
var $4da03c1ecd9a9c7d$exports = {};
$4da03c1ecd9a9c7d$exports = {
  "alpha": `Alfa`,
  "blue": `Modrá`,
  "brightness": `Jas`,
  "green": `Zelená`,
  "hue": `Odtieň`,
  "lightness": `Svetlosť`,
  "red": `Červená`,
  "saturation": `Sýtosť`
};

// node_modules/@react-stately/color/dist/sl-SI.mjs
var $edb6b2fe456ed4e8$exports = {};
$edb6b2fe456ed4e8$exports = {
  "alpha": `Alfa`,
  "blue": `Modra`,
  "brightness": `Svetlost`,
  "green": `Zelena`,
  "hue": `Barva`,
  "lightness": `Lahkost`,
  "red": `Rdeča`,
  "saturation": `Nasičenost`
};

// node_modules/@react-stately/color/dist/sr-SP.mjs
var $264cd81c52b30815$exports = {};
$264cd81c52b30815$exports = {
  "alpha": `Alfa`,
  "blue": `Plava`,
  "brightness": `Osvetljenost`,
  "green": `Zelena`,
  "hue": `Nijansa`,
  "lightness": `Osvetljenje`,
  "red": `Crvena`,
  "saturation": `Zasićenje`
};

// node_modules/@react-stately/color/dist/sv-SE.mjs
var $6f80afde0270dda7$exports = {};
$6f80afde0270dda7$exports = {
  "alpha": `Alfa`,
  "blue": `Blått`,
  "brightness": `Ljusstyrka`,
  "green": `Grönt`,
  "hue": `Nyans`,
  "lightness": `Ljushet`,
  "red": `Rött`,
  "saturation": `Mättnad`
};

// node_modules/@react-stately/color/dist/tr-TR.mjs
var $23a92651c6957668$exports = {};
$23a92651c6957668$exports = {
  "alpha": `Alfa`,
  "blue": `Mavi`,
  "brightness": `Parlaklık`,
  "green": `Yeşil`,
  "hue": `Ton`,
  "lightness": `Canlılık`,
  "red": `Kırmızı`,
  "saturation": `Doygunluk`
};

// node_modules/@react-stately/color/dist/uk-UA.mjs
var $0f9b1074d04f4954$exports = {};
$0f9b1074d04f4954$exports = {
  "alpha": `Альфа`,
  "blue": `Синій`,
  "brightness": `Яскравість`,
  "green": `Зелений`,
  "hue": `Тон`,
  "lightness": `Освітленість`,
  "red": `Червоний`,
  "saturation": `Насиченість`
};

// node_modules/@react-stately/color/dist/zh-CN.mjs
var $a9cedf75b94e4916$exports = {};
$a9cedf75b94e4916$exports = {
  "alpha": `Alpha`,
  "blue": `蓝色`,
  "brightness": `亮度`,
  "green": `绿色`,
  "hue": `色相`,
  "lightness": `明亮度`,
  "red": `红色`,
  "saturation": `饱和度`
};

// node_modules/@react-stately/color/dist/zh-TW.mjs
var $37cff576474bc8d4$exports = {};
$37cff576474bc8d4$exports = {
  "alpha": `Alpha`,
  "blue": `藍色`,
  "brightness": `亮度`,
  "green": `綠色`,
  "hue": `色相`,
  "lightness": `明亮`,
  "red": `紅色`,
  "saturation": `飽和度`
};

// node_modules/@internationalized/string/dist/import.mjs
var $5b160d28a433310d$var$localeSymbol = Symbol.for("react-aria.i18n.locale");
var $5b160d28a433310d$var$stringsSymbol = Symbol.for("react-aria.i18n.strings");
var $5b160d28a433310d$var$cachedGlobalStrings = void 0;
var $5b160d28a433310d$export$c17fa47878dc55b6 = class _$5b160d28a433310d$export$c17fa47878dc55b6 {
  /** Returns a localized string for the given key and locale. */
  getStringForLocale(key, locale) {
    let strings = this.getStringsForLocale(locale);
    let string = strings[key];
    if (!string)
      throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  /** Returns all localized strings for the given locale. */
  getStringsForLocale(locale) {
    let strings = this.strings[locale];
    if (!strings) {
      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
      this.strings[locale] = strings;
    }
    return strings;
  }
  static getGlobalDictionaryForPackage(packageName) {
    if (typeof window === "undefined")
      return null;
    let locale = window[$5b160d28a433310d$var$localeSymbol];
    if ($5b160d28a433310d$var$cachedGlobalStrings === void 0) {
      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
      if (!globalStrings)
        return null;
      $5b160d28a433310d$var$cachedGlobalStrings = {};
      for (let pkg in globalStrings)
        $5b160d28a433310d$var$cachedGlobalStrings[pkg] = new _$5b160d28a433310d$export$c17fa47878dc55b6({
          [locale]: globalStrings[pkg]
        }, locale);
    }
    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
    if (!dictionary)
      throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
    return dictionary;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.strings = {
      ...messages
    };
    this.defaultLocale = defaultLocale;
  }
};
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale])
    return strings[locale];
  let language = $5b160d28a433310d$var$getLanguage(locale);
  if (strings[language])
    return strings[language];
  for (let key in strings) {
    if (key.startsWith(language + "-"))
      return strings[key];
  }
  return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}

// node_modules/@react-stately/color/dist/import.mjs
var import_react3 = __toESM(require_react(), 1);

// node_modules/@react-stately/slider/dist/import.mjs
var import_react = __toESM(require_react(), 1);
var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
  const { isDisabled = false, minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation = "horizontal" } = props;
  let pageSize = (0, import_react.useMemo)(() => {
    let calcPageSize = (maxValue - minValue) / 10;
    calcPageSize = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(calcPageSize, 0, calcPageSize + step, step);
    return Math.max(calcPageSize, step);
  }, [
    step,
    maxValue,
    minValue
  ]);
  let restrictValues = (0, import_react.useCallback)((values2) => values2 === null || values2 === void 0 ? void 0 : values2.map((val, idx) => {
    let min = idx === 0 ? minValue : val[idx - 1];
    let max = idx === values2.length - 1 ? maxValue : val[idx + 1];
    return (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(val, min, max, step);
  }), [
    minValue,
    maxValue,
    step
  ]);
  let value = (0, import_react.useMemo)(() => restrictValues($28f99e3e86e6ec45$var$convertValue(props.value)), [
    props.value
  ]);
  let defaultValue = (0, import_react.useMemo)(() => {
    var _convertValue;
    return restrictValues((_convertValue = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && _convertValue !== void 0 ? _convertValue : [
      minValue
    ]);
  }, [
    props.defaultValue,
    minValue
  ]);
  let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
  let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
  const [values, setValuesState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, defaultValue, onChange);
  const [isDraggings, setDraggingsState] = (0, import_react.useState)(new Array(values.length).fill(false));
  const isEditablesRef = (0, import_react.useRef)(new Array(values.length).fill(true));
  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(void 0);
  const valuesRef = (0, import_react.useRef)(values);
  const isDraggingsRef = (0, import_react.useRef)(isDraggings);
  let setValues = (values2) => {
    valuesRef.current = values2;
    setValuesState(values2);
  };
  let setDraggings = (draggings) => {
    isDraggingsRef.current = draggings;
    setDraggingsState(draggings);
  };
  function getValuePercent(value2) {
    return (value2 - minValue) / (maxValue - minValue);
  }
  function getThumbMinValue(index) {
    return index === 0 ? minValue : values[index - 1];
  }
  function getThumbMaxValue(index) {
    return index === values.length - 1 ? maxValue : values[index + 1];
  }
  function isThumbEditable(index) {
    return isEditablesRef.current[index];
  }
  function setThumbEditable(index, editable) {
    isEditablesRef.current[index] = editable;
  }
  function updateValue(index, value2) {
    if (isDisabled || !isThumbEditable(index))
      return;
    const thisMin = getThumbMinValue(index);
    const thisMax = getThumbMaxValue(index);
    value2 = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(value2, thisMin, thisMax, step);
    let newValues = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value2);
    setValues(newValues);
  }
  function updateDragging(index, dragging) {
    if (isDisabled || !isThumbEditable(index))
      return;
    if (dragging)
      valuesRef.current = values;
    const wasDragging = isDraggingsRef.current[index];
    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
    setDraggings(isDraggingsRef.current);
    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean))
      onChangeEnd(valuesRef.current);
  }
  function getFormattedValue(value2) {
    return formatter.format(value2);
  }
  function setThumbPercent(index, percent) {
    updateValue(index, getPercentValue(percent));
  }
  function getRoundedValue(value2) {
    return Math.round((value2 - minValue) / step) * step + minValue;
  }
  function getPercentValue(percent) {
    const val = percent * (maxValue - minValue) + minValue;
    return (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(getRoundedValue(val), minValue, maxValue);
  }
  function incrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] + s, minValue, maxValue, step));
  }
  function decrementThumb(index, stepSize = 1) {
    let s = Math.max(stepSize, step);
    updateValue(index, (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] - s, minValue, maxValue, step));
  }
  return {
    values,
    getThumbValue: (index) => values[index],
    setThumbValue: updateValue,
    setThumbPercent,
    isThumbDragging: (index) => isDraggings[index],
    setThumbDragging: updateDragging,
    focusedThumb: focusedIndex,
    setFocusedThumb: setFocusedIndex,
    getThumbPercent: (index) => getValuePercent(values[index]),
    getValuePercent,
    getThumbValueLabel: (index) => getFormattedValue(values[index]),
    getFormattedValue,
    getThumbMinValue,
    getThumbMaxValue,
    getPercentValue,
    isThumbEditable,
    setThumbEditable,
    incrementThumb,
    decrementThumb,
    step,
    pageSize,
    orientation,
    isDisabled
  };
}
function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
  if (array[index] === value)
    return array;
  return [
    ...array.slice(0, index),
    value,
    ...array.slice(index + 1)
  ];
}
function $28f99e3e86e6ec45$var$convertValue(value) {
  if (value == null)
    return void 0;
  return Array.isArray(value) ? value : [
    value
  ];
}
function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
  return (newValue) => {
    if (typeof value === "number" || typeof defaultValue === "number")
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
    else
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  };
}

// node_modules/@react-stately/form/dist/import.mjs
var import_react2 = __toESM(require_react(), 1);
var $e5be200c675c3b3a$export$aca958c65c314e6c = {
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valueMissing: false,
  valid: true
};
var $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
  ...$e5be200c675c3b3a$export$aca958c65c314e6c,
  customError: true,
  valid: false
};
var $e5be200c675c3b3a$export$dad6ae84456c676a = {
  isInvalid: false,
  validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
  validationErrors: []
};
var $e5be200c675c3b3a$export$571b5131b7e65c11 = (0, import_react2.createContext)({});
var $e5be200c675c3b3a$export$a763b9476acd3eb = "__formValidationState" + Date.now();
function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
  if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
    let { realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
    return {
      realtimeValidation,
      displayValidation,
      updateValidation,
      resetValidation,
      commitValidation
    };
  }
  return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
}
function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
  let { isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = "aria" } = props;
  if (validationState)
    isInvalid || (isInvalid = validationState === "invalid");
  let controlledError = isInvalid ? {
    isInvalid: true,
    validationErrors: [],
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
  let clientError = (0, import_react2.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate, value)), [
    validate,
    value
  ]);
  if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid)
    builtinValidation = null;
  let serverErrors = (0, import_react2.useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);
  let serverErrorMessages = (0, import_react2.useMemo)(() => {
    if (name)
      return Array.isArray(name) ? name.flatMap((name2) => $e5be200c675c3b3a$var$asArray(serverErrors[name2])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
    return [];
  }, [
    serverErrors,
    name
  ]);
  let [lastServerErrors, setLastServerErrors] = (0, import_react2.useState)(serverErrors);
  let [isServerErrorCleared, setServerErrorCleared] = (0, import_react2.useState)(false);
  if (serverErrors !== lastServerErrors) {
    setLastServerErrors(serverErrors);
    setServerErrorCleared(false);
  }
  let serverError = (0, import_react2.useMemo)(() => $e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
    isServerErrorCleared,
    serverErrorMessages
  ]);
  let nextValidation = (0, import_react2.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let [currentValidity, setCurrentValidity] = (0, import_react2.useState)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let lastError = (0, import_react2.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
  let commitValidation = () => {
    if (!commitQueued)
      return;
    setCommitQueued(false);
    let error = clientError || builtinValidation || nextValidation.current;
    if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
      lastError.current = error;
      setCurrentValidity(error);
    }
  };
  let [commitQueued, setCommitQueued] = (0, import_react2.useState)(false);
  (0, import_react2.useEffect)(commitValidation);
  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
  let displayValidation = validationBehavior === "native" ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
  return {
    realtimeValidation,
    displayValidation,
    updateValidation(value2) {
      if (validationBehavior === "aria" && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value2))
        setCurrentValidity(value2);
      else
        nextValidation.current = value2;
    },
    resetValidation() {
      let error = $e5be200c675c3b3a$export$dad6ae84456c676a;
      if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
        lastError.current = error;
        setCurrentValidity(error);
      }
      if (validationBehavior === "native")
        setCommitQueued(false);
      setServerErrorCleared(true);
    },
    commitValidation() {
      if (validationBehavior === "native")
        setCommitQueued(true);
      setServerErrorCleared(true);
    }
  };
}
function $e5be200c675c3b3a$var$asArray(v) {
  if (!v)
    return [];
  return Array.isArray(v) ? v : [
    v
  ];
}
function $e5be200c675c3b3a$var$runValidate(validate, value) {
  if (typeof validate === "function") {
    let e = validate(value);
    if (e && typeof e !== "boolean")
      return $e5be200c675c3b3a$var$asArray(e);
  }
  return [];
}
function $e5be200c675c3b3a$var$getValidationResult(errors) {
  return errors.length ? {
    isInvalid: true,
    validationErrors: errors,
    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
  } : null;
}
function $e5be200c675c3b3a$var$isEqualValidation(a, b) {
  if (a === b)
    return true;
  return a && b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a2, i) => a2 === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);
}

// node_modules/@react-stately/color/dist/import.mjs
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $f98dad178a72c00d$exports = {};
$f98dad178a72c00d$exports = {
  "ar-AE": $2d805fd52bb48883$exports,
  "bg-BG": $6c28468dc1df643c$exports,
  "cs-CZ": $807554f8230db0ed$exports,
  "da-DK": $7097f64386f1761c$exports,
  "de-DE": $bdd847d8beb08799$exports,
  "el-GR": $a53e00b683950971$exports,
  "en-US": $21cdd87e84f28d89$exports,
  "es-ES": $92fee9698e4d675a$exports,
  "et-EE": $7ea012e91a5ad3ee$exports,
  "fi-FI": $8460c13bb2d75345$exports,
  "fr-FR": $2a2d5dc14e680587$exports,
  "he-IL": $9a3f292371bb0589$exports,
  "hr-HR": $4742231a685fa068$exports,
  "hu-HU": $05e247fd2960981e$exports,
  "it-IT": $a67524a79ccbe190$exports,
  "ja-JP": $a9eefe9d6c8cb7d5$exports,
  "ko-KR": $4a6b836d4f1bfaba$exports,
  "lt-LT": $c950e4b1c482abde$exports,
  "lv-LV": $d10d6b60dc50b438$exports,
  "nb-NO": $371a732b2494f452$exports,
  "nl-NL": $6d042cae6243464b$exports,
  "pl-PL": $d9ab5c2611e0bcd3$exports,
  "pt-BR": $73f77c9902e29ca6$exports,
  "pt-PT": $4f461eb266a95c10$exports,
  "ro-RO": $dc46bea2f2597899$exports,
  "ru-RU": $622bbd6719cc95af$exports,
  "sk-SK": $4da03c1ecd9a9c7d$exports,
  "sl-SI": $edb6b2fe456ed4e8$exports,
  "sr-SP": $264cd81c52b30815$exports,
  "sv-SE": $6f80afde0270dda7$exports,
  "tr-TR": $23a92651c6957668$exports,
  "uk-UA": $0f9b1074d04f4954$exports,
  "zh-CN": $a9cedf75b94e4916$exports,
  "zh-TW": $37cff576474bc8d4$exports
};
var $799cddbef784668f$var$dictionary = new (0, $5b160d28a433310d$export$c17fa47878dc55b6)((0, $parcel$interopDefault($f98dad178a72c00d$exports)));
function $799cddbef784668f$export$6e865ea70d7724f(value) {
  let res = $799cddbef784668f$var$RGBColor.parse(value) || $799cddbef784668f$var$HSBColor.parse(value) || $799cddbef784668f$var$HSLColor.parse(value);
  if (res)
    return res;
  throw new Error("Invalid color value: " + value);
}
function $799cddbef784668f$export$4cde5df63f53f473(v) {
  if (typeof v === "string")
    return $799cddbef784668f$export$6e865ea70d7724f(v);
  else
    return v;
}
var $799cddbef784668f$var$Color = class {
  toHexInt() {
    return this.toFormat("rgb").toHexInt();
  }
  getChannelValue(channel) {
    if (channel in this)
      return this[channel];
    throw new Error("Unsupported color channel: " + channel);
  }
  withChannelValue(channel, value) {
    if (channel in this) {
      let x = this.clone();
      x[channel] = value;
      return x;
    }
    throw new Error("Unsupported color channel: " + channel);
  }
  getChannelName(channel, locale) {
    let strings = (0, $5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage("@react-stately/color") || $799cddbef784668f$var$dictionary;
    return strings.getStringForLocale(channel, locale);
  }
  getColorSpaceAxes(xyChannels) {
    let { xChannel, yChannel } = xyChannels;
    let xCh = xChannel || this.getColorChannels().find((c) => c !== yChannel);
    let yCh = yChannel || this.getColorChannels().find((c) => c !== xCh);
    let zCh = this.getColorChannels().find((c) => c !== xCh && c !== yCh);
    return {
      xChannel: xCh,
      yChannel: yCh,
      zChannel: zCh
    };
  }
};
var $799cddbef784668f$var$RGBColor = class _$799cddbef784668f$var$RGBColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let colors = [];
    if (/^#[\da-f]+$/i.test(value) && [
      4,
      5,
      7,
      9
    ].includes(value.length)) {
      const values = (value.length < 6 ? value.replace(/[^#]/gi, "$&$&") : value).slice(1).split("");
      while (values.length > 0)
        colors.push(parseInt(values.splice(0, 2).join(""), 16));
      colors[3] = colors[3] !== void 0 ? colors[3] / 255 : void 0;
    }
    const match = value.match(/^rgba?\((.*)\)$/);
    if (match === null || match === void 0 ? void 0 : match[1]) {
      colors = match[1].split(",").map((value2) => Number(value2.trim()));
      colors = colors.map((num, i) => (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(num, 0, i < 3 ? 255 : 1));
    }
    var _colors_;
    return colors.length < 3 ? void 0 : new _$799cddbef784668f$var$RGBColor(colors[0], colors[1], colors[2], (_colors_ = colors[3]) !== null && _colors_ !== void 0 ? _colors_ : 1);
  }
  toString(format) {
    switch (format) {
      case "hex":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0")).toUpperCase();
      case "hexa":
        return "#" + (this.red.toString(16).padStart(2, "0") + this.green.toString(16).padStart(2, "0") + this.blue.toString(16).padStart(2, "0") + Math.round(this.alpha * 255).toString(16).padStart(2, "0")).toUpperCase();
      case "rgb":
        return `rgb(${this.red}, ${this.green}, ${this.blue})`;
      case "css":
      case "rgba":
        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hex":
      case "hexa":
      case "rgb":
      case "rgba":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "hsl":
      case "hsla":
        return this.toHSL();
      default:
        throw new Error("Unsupported color conversion: rgb -> " + format);
    }
  }
  toHexInt() {
    return this.red << 16 | this.green << 8 | this.blue;
  }
  /**
  * Converts an RGB color value to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSBColor object.
  */
  toHSB() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const brightness = Math.max(red, green, blue);
    const chroma = brightness - min;
    const saturation = brightness === 0 ? 0 : chroma / brightness;
    let hue = 0;
    if (chroma !== 0) {
      switch (brightness) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSBColor((0, $9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
  }
  /**
  * Converts an RGB color value to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
  * @returns An HSLColor object.
  */
  toHSL() {
    const red = this.red / 255;
    const green = this.green / 255;
    const blue = this.blue / 255;
    const min = Math.min(red, green, blue);
    const max = Math.max(red, green, blue);
    const lightness = (max + min) / 2;
    const chroma = max - min;
    let hue;
    let saturation;
    if (chroma === 0)
      hue = saturation = 0;
    else {
      saturation = chroma / (lightness < 0.5 ? max + min : 2 - max - min);
      switch (max) {
        case red:
          hue = (green - blue) / chroma + (green < blue ? 6 : 0);
          break;
        case green:
          hue = (blue - red) / chroma + 2;
          break;
        case blue:
          hue = (red - green) / chroma + 4;
          break;
      }
      hue /= 6;
    }
    return new $799cddbef784668f$var$HSLColor((0, $9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$RGBColor(this.red, this.green, this.blue, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        return {
          minValue: 0,
          maxValue: 255,
          step: 1,
          pageSize: 17
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "red":
      case "green":
      case "blue":
        options = {
          style: "decimal"
        };
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "rgb";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$RGBColor.colorChannels;
  }
  constructor(red, green, blue, alpha) {
    super();
    this.red = red;
    this.green = green;
    this.blue = blue;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$RGBColor.colorChannels = [
  "red",
  "green",
  "blue"
];
var $799cddbef784668f$var$HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
var $799cddbef784668f$var$HSBColor = class _$799cddbef784668f$var$HSBColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSB_REGEX)) {
      var _m_;
      const [h, s, b, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new _$799cddbef784668f$var$HSBColor($799cddbef784668f$var$mod(h, 360), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(b, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format) {
    switch (format) {
      case "css":
        return this.toHSL().toString("css");
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsb":
        return `hsb(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%)`;
      case "hsba":
        return `hsba(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsb":
      case "hsba":
        return this;
      case "hsl":
      case "hsla":
        return this.toHSL();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsb -> " + format);
    }
  }
  /**
  * Converts a HSB color to HSL.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
  * @returns An HSLColor object.
  */
  toHSL() {
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let lightness = brightness * (1 - saturation / 2);
    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
    return new $799cddbef784668f$var$HSLColor((0, $9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
  }
  /**
  * Converts a HSV color value to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let brightness = this.brightness / 100;
    let fn = (n, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$HSBColor(this.hue, this.saturation, this.brightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "brightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "hue":
        options = {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
        break;
      case "saturation":
      case "brightness":
        options = {
          style: "percent"
        };
        value /= 100;
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "hsb";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$HSBColor.colorChannels;
  }
  constructor(hue, saturation, brightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.brightness = brightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSBColor.colorChannels = [
  "hue",
  "saturation",
  "brightness"
];
var $799cddbef784668f$var$HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
function $799cddbef784668f$var$mod(n, m) {
  return (n % m + m) % m;
}
var $799cddbef784668f$var$HSLColor = class _$799cddbef784668f$var$HSLColor extends $799cddbef784668f$var$Color {
  static parse(value) {
    let m;
    if (m = value.match($799cddbef784668f$var$HSL_REGEX)) {
      var _m_;
      const [h, s, l, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(",").map((n) => Number(n.trim().replace("%", "")));
      return new _$799cddbef784668f$var$HSLColor($799cddbef784668f$var$mod(h, 360), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(l, 0, 100), (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
    }
  }
  toString(format) {
    switch (format) {
      case "hex":
        return this.toRGB().toString("hex");
      case "hexa":
        return this.toRGB().toString("hexa");
      case "hsl":
        return `hsl(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%)`;
      case "css":
      case "hsla":
        return `hsla(${this.hue}, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${(0, $9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%, ${this.alpha})`;
      default:
        return this.toFormat(format).toString(format);
    }
  }
  toFormat(format) {
    switch (format) {
      case "hsl":
      case "hsla":
        return this;
      case "hsb":
      case "hsba":
        return this.toHSB();
      case "rgb":
      case "rgba":
        return this.toRGB();
      default:
        throw new Error("Unsupported color conversion: hsl -> " + format);
    }
  }
  /**
  * Converts a HSL color to HSB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
  * @returns An HSBColor object.
  */
  toHSB() {
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
    return new $799cddbef784668f$var$HSBColor((0, $9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), (0, $9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
  }
  /**
  * Converts a HSL color to RGB.
  * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
  * @returns An RGBColor object.
  */
  toRGB() {
    let hue = this.hue;
    let saturation = this.saturation / 100;
    let lightness = this.lightness / 100;
    let a = saturation * Math.min(lightness, 1 - lightness);
    let fn = (n, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return new $799cddbef784668f$var$RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), this.alpha);
  }
  clone() {
    return new _$799cddbef784668f$var$HSLColor(this.hue, this.saturation, this.lightness, this.alpha);
  }
  getChannelRange(channel) {
    switch (channel) {
      case "hue":
        return {
          minValue: 0,
          maxValue: 360,
          step: 1,
          pageSize: 15
        };
      case "saturation":
      case "lightness":
        return {
          minValue: 0,
          maxValue: 100,
          step: 1,
          pageSize: 10
        };
      case "alpha":
        return {
          minValue: 0,
          maxValue: 1,
          step: 0.01,
          pageSize: 0.1
        };
      default:
        throw new Error("Unknown color channel: " + channel);
    }
  }
  formatChannelValue(channel, locale) {
    let options;
    let value = this.getChannelValue(channel);
    switch (channel) {
      case "hue":
        options = {
          style: "unit",
          unit: "degree",
          unitDisplay: "narrow"
        };
        break;
      case "saturation":
      case "lightness":
        options = {
          style: "percent"
        };
        value /= 100;
        break;
      case "alpha":
        options = {
          style: "percent"
        };
        break;
      default:
        throw new Error("Unknown color channel: " + channel);
    }
    return new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
  }
  getColorSpace() {
    return "hsl";
  }
  getColorChannels() {
    return _$799cddbef784668f$var$HSLColor.colorChannels;
  }
  constructor(hue, saturation, lightness, alpha) {
    super();
    this.hue = hue;
    this.saturation = saturation;
    this.lightness = lightness;
    this.alpha = alpha;
  }
};
$799cddbef784668f$var$HSLColor.colorChannels = [
  "hue",
  "saturation",
  "lightness"
];
var $6e14a98a7f67141d$var$DEFAULT_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#ffffff");
function $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props) {
  let { value, defaultValue, xChannel, yChannel, onChange, onChangeEnd } = props;
  if (!value && !defaultValue)
    defaultValue = $6e14a98a7f67141d$var$DEFAULT_COLOR;
  let [color, setColorState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && (0, $799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let valueRef = (0, import_react3.useRef)(color);
  let setColor = (color2) => {
    valueRef.current = color2;
    setColorState(color2);
  };
  let channels = (0, import_react3.useMemo)(() => color.getColorSpaceAxes({
    xChannel,
    yChannel
  }), [
    color,
    xChannel,
    yChannel
  ]);
  let xChannelRange = color.getChannelRange(channels.xChannel);
  let yChannelRange = color.getChannelRange(channels.yChannel);
  let { minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX } = xChannelRange;
  let { minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY } = yChannelRange;
  let [isDragging, setDragging] = (0, import_react3.useState)(false);
  let isDraggingRef = (0, import_react3.useRef)(false);
  let xValue = color.getChannelValue(channels.xChannel);
  let yValue = color.getChannelValue(channels.yChannel);
  let setXValue = (v) => {
    if (v === xValue)
      return;
    let newColor = color.withChannelValue(channels.xChannel, v);
    setColor(newColor);
  };
  let setYValue = (v) => {
    if (v === yValue)
      return;
    let newColor = color.withChannelValue(channels.yChannel, v);
    setColor(newColor);
  };
  return {
    channels,
    xChannelStep: stepX,
    yChannelStep: stepY,
    xChannelPageStep: pageSizeX,
    yChannelPageStep: pageSizeY,
    value: color,
    setValue(value2) {
      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value2));
    },
    xValue,
    setXValue,
    yValue,
    setYValue,
    setColorFromPoint(x, y) {
      let newXValue = minValueX + (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(x, 0, 1) * (maxValueX - minValueX);
      let newYValue = minValueY + (1 - (0, $9446cca9a3875146$export$7d15b64cf5a3a4c4)(y, 0, 1)) * (maxValueY - minValueY);
      let newColor;
      if (newXValue !== xValue) {
        newXValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newXValue, minValueX, maxValueX, stepX);
        newColor = color.withChannelValue(channels.xChannel, newXValue);
      }
      if (newYValue !== yValue) {
        newYValue = (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(newYValue, minValueY, maxValueY, stepY);
        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);
      }
      if (newColor)
        setColor(newColor);
    },
    getThumbPosition() {
      let x = (xValue - minValueX) / (maxValueX - minValueX);
      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);
      return {
        x,
        y
      };
    },
    incrementX(stepSize) {
      setXValue(xValue + stepSize > maxValueX ? maxValueX : (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(xValue + stepSize, minValueX, maxValueX, stepX));
    },
    incrementY(stepSize) {
      setYValue(yValue + stepSize > maxValueY ? maxValueY : (0, $9446cca9a3875146$export$cb6e0bb50bc19463)(yValue + stepSize, minValueY, maxValueY, stepY));
    },
    decrementX(stepSize) {
      setXValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(xValue - stepSize, minValueX, maxValueX, stepX));
    },
    decrementY(stepSize) {
      setYValue((0, $9446cca9a3875146$export$cb6e0bb50bc19463)(yValue - stepSize, minValueY, maxValueY, stepY));
    },
    setDragging(isDragging2) {
      let wasDragging = isDraggingRef.current;
      isDraggingRef.current = isDragging2;
      if (onChangeEnd && !isDragging2 && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging2);
    },
    isDragging,
    getDisplayColor() {
      return color.withChannelValue("alpha", 1);
    }
  };
}
function $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {
  let { channel, value, defaultValue, onChange, locale, ...otherProps } = props;
  if (value == null && defaultValue == null)
    throw new Error("useColorSliderState requires a value or defaultValue");
  let [color, setColor] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && (0, $799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let sliderState = (0, $28f99e3e86e6ec45$export$e5fda3247f5d67f9)({
    ...color.getChannelRange(channel),
    ...otherProps,
    // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.
    numberFormatter: null,
    value: color.getChannelValue(channel),
    onChange(v) {
      setColor(color.withChannelValue(channel, v));
    },
    onChangeEnd(v) {
      if (props.onChangeEnd)
        props.onChangeEnd(color.withChannelValue(channel, v));
    }
  });
  let { step, pageSize } = color.getChannelRange(channel);
  return {
    ...sliderState,
    value: color,
    setValue(value2) {
      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value2));
    },
    getDisplayColor() {
      switch (channel) {
        case "hue":
          return (0, $799cddbef784668f$export$6e865ea70d7724f)(`hsl(${color.getChannelValue("hue")}, 100%, 50%)`);
        case "lightness":
        case "brightness":
        case "saturation":
        case "red":
        case "green":
        case "blue":
          return color.withChannelValue("alpha", 1);
        case "alpha":
          return color;
        default:
          throw new Error("Unknown color channel: " + channel);
      }
    },
    getThumbValueLabel() {
      return color.formatChannelValue(channel, locale);
    },
    step,
    pageSize
  };
}
var $ee4262c74a467b07$var$DEFAULT_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("hsl(0, 100%, 50%)");
function $ee4262c74a467b07$var$roundToStep(value, step) {
  return Math.round(value / step) * step;
}
function $ee4262c74a467b07$var$mod(n, m) {
  return (n % m + m) % m;
}
function $ee4262c74a467b07$var$roundDown(v) {
  let r = Math.floor(v);
  if (r === v)
    return v - 1;
  else
    return r;
}
function $ee4262c74a467b07$var$degToRad(deg) {
  return deg * Math.PI / 180;
}
function $ee4262c74a467b07$var$radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function $ee4262c74a467b07$var$angleToCartesian(angle, radius) {
  let rad = $ee4262c74a467b07$var$degToRad(360 - angle + 90);
  let x = Math.sin(rad) * radius;
  let y = Math.cos(rad) * radius;
  return {
    x,
    y
  };
}
function $ee4262c74a467b07$var$cartesianToAngle(x, y, radius) {
  let deg = $ee4262c74a467b07$var$radToDeg(Math.atan2(y / radius, x / radius));
  return (deg + 360) % 360;
}
function $ee4262c74a467b07$export$f4301076d9336137(props) {
  let { defaultValue, onChange, onChangeEnd } = props;
  if (!props.value && !defaultValue)
    defaultValue = $ee4262c74a467b07$var$DEFAULT_COLOR;
  let [value, setValueState] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)((0, $799cddbef784668f$export$4cde5df63f53f473)(props.value), (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
  let valueRef = (0, import_react3.useRef)(value);
  let setValue = (value2) => {
    valueRef.current = value2;
    setValueState(value2);
  };
  let channelRange = value.getChannelRange("hue");
  let { minValue: minValueX, maxValue: maxValueX, step, pageSize: pageStep } = channelRange;
  let [isDragging, setDragging] = (0, import_react3.useState)(false);
  let isDraggingRef = (0, import_react3.useRef)(false);
  let hue = value.getChannelValue("hue");
  function setHue(v) {
    if (v > 360)
      v = 0;
    v = $ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(v, 360), step);
    if (hue !== v) {
      let color = value.withChannelValue("hue", v);
      setValue(color);
    }
  }
  return {
    value,
    step,
    pageStep,
    setValue(v) {
      let color = (0, $799cddbef784668f$export$4cde5df63f53f473)(v);
      setValue(color);
    },
    hue,
    setHue,
    setHueFromPoint(x, y, radius) {
      setHue($ee4262c74a467b07$var$cartesianToAngle(x, y, radius));
    },
    getThumbPosition(radius) {
      return $ee4262c74a467b07$var$angleToCartesian(value.getChannelValue("hue"), radius);
    },
    increment(stepSize = 1) {
      let s = Math.max(stepSize, step);
      let newValue = hue + s;
      if (newValue >= maxValueX)
        newValue = minValueX;
      setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(newValue, 360), s));
    },
    decrement(stepSize = 1) {
      let s = Math.max(stepSize, step);
      if (hue === 0)
        setHue($ee4262c74a467b07$var$roundDown(360 / s) * s);
      else
        setHue($ee4262c74a467b07$var$roundToStep($ee4262c74a467b07$var$mod(hue - s, 360), s));
    },
    setDragging(isDragging2) {
      let wasDragging = isDraggingRef.current;
      isDraggingRef.current = isDragging2;
      if (onChangeEnd && !isDragging2 && wasDragging)
        onChangeEnd(valueRef.current);
      setDragging(isDragging2);
    },
    isDragging,
    getDisplayColor() {
      return value.toFormat("hsl").withChannelValue("saturation", 100).withChannelValue("lightness", 50).withChannelValue("alpha", 1);
    }
  };
}
function $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(value) {
  return (0, import_react3.useMemo)(() => {
    if (typeof value === "string")
      try {
        return (0, $799cddbef784668f$export$6e865ea70d7724f)(value);
      } catch (err) {
        return void 0;
      }
    return value;
  }, [
    value
  ]);
}
var $b335ada08155d9c0$var$MIN_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#000000");
var $b335ada08155d9c0$var$MAX_COLOR = (0, $799cddbef784668f$export$6e865ea70d7724f)("#FFFFFF");
var $b335ada08155d9c0$var$MIN_COLOR_INT = $b335ada08155d9c0$var$MIN_COLOR.toHexInt();
var $b335ada08155d9c0$var$MAX_COLOR_INT = $b335ada08155d9c0$var$MAX_COLOR.toHexInt();
function $b335ada08155d9c0$export$d52a01683abdfcd6(props) {
  let { value, defaultValue, onChange } = props;
  let { step } = $b335ada08155d9c0$var$MIN_COLOR.getChannelRange("red");
  let initialValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(value);
  let initialDefaultValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(defaultValue);
  let [colorValue, setColorValue] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(initialValue, initialDefaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react3.useState)(() => (value || defaultValue) && colorValue ? colorValue.toString("hex") : "");
  let validation = (0, $e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
    ...props,
    value: colorValue
  });
  let safelySetColorValue = (newColor) => {
    if (!colorValue || !newColor) {
      setColorValue(newColor);
      return;
    }
    if (newColor.toHexInt() !== colorValue.toHexInt()) {
      setColorValue(newColor);
      return;
    }
  };
  let [prevValue, setPrevValue] = (0, import_react3.useState)(colorValue);
  if (prevValue !== colorValue) {
    setInputValue(colorValue ? colorValue.toString("hex") : "");
    setPrevValue(colorValue);
  }
  let parsedValue = (0, import_react3.useMemo)(() => {
    let color;
    try {
      color = (0, $799cddbef784668f$export$6e865ea70d7724f)(inputValue.startsWith("#") ? inputValue : `#${inputValue}`);
    } catch (err) {
      color = null;
    }
    return color;
  }, [
    inputValue
  ]);
  let commit = () => {
    if (!inputValue.length) {
      safelySetColorValue(null);
      setInputValue(value === void 0 ? "" : colorValue.toString("hex"));
      return;
    }
    if (parsedValue == null) {
      setInputValue(colorValue ? colorValue.toString("hex") : "");
      return;
    }
    safelySetColorValue(parsedValue);
    let newColorValue = "";
    if (colorValue)
      newColorValue = colorValue.toString("hex");
    setInputValue(newColorValue);
  };
  let increment = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
    validation.commitValidation();
  };
  let decrement = () => {
    let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, -step);
    if (newValue === colorValue)
      setInputValue(newValue.toString("hex"));
    safelySetColorValue(newValue);
    validation.commitValidation();
  };
  let incrementToMax = () => safelySetColorValue($b335ada08155d9c0$var$MAX_COLOR);
  let decrementToMin = () => safelySetColorValue($b335ada08155d9c0$var$MIN_COLOR);
  let validate = (value2) => {
    var _value_match;
    return value2 === "" || !!((_value_match = value2.match(/^#?[0-9a-f]{0,6}$/i)) === null || _value_match === void 0 ? void 0 : _value_match[0]);
  };
  return {
    ...validation,
    validate,
    colorValue,
    inputValue,
    setInputValue,
    commit,
    increment,
    incrementToMax,
    decrement,
    decrementToMin
  };
}
function $b335ada08155d9c0$var$addColorValue(color, step) {
  let newColor = color ? color : $b335ada08155d9c0$var$MIN_COLOR;
  let colorInt = newColor.toHexInt();
  let clampInt = Math.min(Math.max(colorInt + step, $b335ada08155d9c0$var$MIN_COLOR_INT), $b335ada08155d9c0$var$MAX_COLOR_INT);
  if (clampInt !== colorInt) {
    let newColorString = `#${clampInt.toString(16).padStart(6, "0").toUpperCase()}`;
    newColor = (0, $799cddbef784668f$export$6e865ea70d7724f)(newColorString);
  }
  return newColor;
}
export {
  $799cddbef784668f$export$6e865ea70d7724f as parseColor,
  $6e14a98a7f67141d$export$6df7f0e2cabc7eef as useColorAreaState,
  $b335ada08155d9c0$export$d52a01683abdfcd6 as useColorFieldState,
  $25a25ac0d1624665$export$57bc203e1c9c6d44 as useColorSliderState,
  $ee4262c74a467b07$export$f4301076d9336137 as useColorWheelState
};
//# sourceMappingURL=@react-stately_color.js.map
