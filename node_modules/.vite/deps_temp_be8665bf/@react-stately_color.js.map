{
  "version": 3,
  "sources": ["../../@react-stately/color/dist/packages/@react-stately/color/intl/ar-AE.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/bg-BG.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/cs-CZ.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/da-DK.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/de-DE.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/el-GR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/en-US.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/es-ES.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/et-EE.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/fi-FI.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/fr-FR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/he-IL.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/hr-HR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/hu-HU.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/it-IT.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/ja-JP.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/ko-KR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/lt-LT.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/lv-LV.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/nb-NO.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/nl-NL.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/pl-PL.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/pt-BR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/pt-PT.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/ro-RO.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/ru-RU.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/sk-SK.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/sl-SI.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/sr-SP.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/sv-SE.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/tr-TR.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/uk-UA.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/zh-CN.json", "../../@react-stately/color/dist/packages/@react-stately/color/intl/zh-TW.json", "../../@internationalized/string/dist/packages/@internationalized/string/src/index.ts", "../../@internationalized/string/dist/packages/@internationalized/string/src/LocalizedStringDictionary.ts", "../../@internationalized/string/dist/packages/@internationalized/string/src/LocalizedStringFormatter.ts", "../../@react-stately/slider/dist/packages/@react-stately/slider/src/index.ts", "../../@react-stately/slider/dist/packages/@react-stately/slider/src/useSliderState.ts", "../../@react-stately/form/dist/packages/@react-stately/form/src/index.ts", "../../@react-stately/form/dist/packages/@react-stately/form/src/useFormValidationState.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/index.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/Color.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/*.js", "../../@react-stately/color/dist/packages/@react-stately/color/src/useColorAreaState.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/useColorSliderState.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/useColorWheelState.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/useColorFieldState.ts", "../../@react-stately/color/dist/packages/@react-stately/color/src/useColor.ts"],
  "sourcesContent": ["{\n  \"alpha\": \"ألفا\",\n  \"blue\": \"أزرق\",\n  \"brightness\": \"السطوع\",\n  \"green\": \"أخضر\",\n  \"hue\": \"درجة اللون\",\n  \"lightness\": \"الإضاءة\",\n  \"red\": \"أحمر\",\n  \"saturation\": \"التشبع\"\n}\n", "{\n  \"alpha\": \"Алфа\",\n  \"blue\": \"Синьо\",\n  \"brightness\": \"Яркост\",\n  \"green\": \"Зелено\",\n  \"hue\": \"Оттенък\",\n  \"lightness\": \"Лекота\",\n  \"red\": \"Червено\",\n  \"saturation\": \"Наситеност\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modrá\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelená\",\n  \"hue\": \"Odstín\",\n  \"lightness\": \"Světlost\",\n  \"red\": \"Červená\",\n  \"saturation\": \"Sytost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blå\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Grøn\",\n  \"hue\": \"Tone\",\n  \"lightness\": \"Lyshed\",\n  \"red\": \"Rød\",\n  \"saturation\": \"Farvemætning\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Blau\",\n  \"brightness\": \"Helligkeit\",\n  \"green\": \"Grün\",\n  \"hue\": \"Farbton\",\n  \"lightness\": \"Leuchtkraft\",\n  \"red\": \"Rot\",\n  \"saturation\": \"Sättigung\"\n}\n", "{\n  \"alpha\": \"Άλφα\",\n  \"blue\": \"Μπλε\",\n  \"brightness\": \"Φωτεινότητα\",\n  \"green\": \"Πράσινο\",\n  \"hue\": \"Τόνος\",\n  \"lightness\": \"Φωτεινότητα\",\n  \"red\": \"Κόκκινο\",\n  \"saturation\": \"Κορεσμός\"\n}\n", "{\n  \"hue\": \"Hue\",\n  \"saturation\": \"Saturation\",\n  \"lightness\": \"Lightness\",\n  \"brightness\": \"Brightness\",\n  \"red\": \"Red\",\n  \"green\": \"Green\",\n  \"blue\": \"Blue\",\n  \"alpha\": \"Alpha\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brillo\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tono\",\n  \"lightness\": \"Luminosidad\",\n  \"red\": \"Rojo\",\n  \"saturation\": \"Saturación\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Sinine\",\n  \"brightness\": \"Heledus\",\n  \"green\": \"Roheline\",\n  \"hue\": \"Värv\",\n  \"lightness\": \"Valgus\",\n  \"red\": \"Punane\",\n  \"saturation\": \"Küllastus\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Sininen\",\n  \"brightness\": \"Kirkkaus\",\n  \"green\": \"Vihreä\",\n  \"hue\": \"Sävy\",\n  \"lightness\": \"Valomäärä\",\n  \"red\": \"Punainen\",\n  \"saturation\": \"Värikylläisyys\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"Bleu\",\n  \"brightness\": \"Luminosité\",\n  \"green\": \"Vert\",\n  \"hue\": \"Teinte\",\n  \"lightness\": \"Luminosité\",\n  \"red\": \"Rouge\",\n  \"saturation\": \"Saturation\"\n}\n", "{\n  \"alpha\": \"אלפא\",\n  \"blue\": \"כחול\",\n  \"brightness\": \"בהירות\",\n  \"green\": \"ירוק\",\n  \"hue\": \"גוון\",\n  \"lightness\": \"כמות אור\",\n  \"red\": \"אדום\",\n  \"saturation\": \"רוויה\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Svjetlina\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvijetljenost\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasićenost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Kék\",\n  \"brightness\": \"Fényesség\",\n  \"green\": \"Zöld\",\n  \"hue\": \"Színárnyalat\",\n  \"lightness\": \"Világosság\",\n  \"red\": \"Piros\",\n  \"saturation\": \"Telítettség\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blu\",\n  \"brightness\": \"Luminosità\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalità\",\n  \"lightness\": \"Luminosità\",\n  \"red\": \"Rosso\",\n  \"saturation\": \"Saturazione\"\n}\n", "{\n  \"alpha\": \"アルファ\",\n  \"blue\": \"青\",\n  \"brightness\": \"明るさ\",\n  \"green\": \"緑\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明度\",\n  \"red\": \"赤\",\n  \"saturation\": \"彩度\"\n}\n", "{\n  \"alpha\": \"알파\",\n  \"blue\": \"파랑\",\n  \"brightness\": \"명도\",\n  \"green\": \"초록\",\n  \"hue\": \"색조\",\n  \"lightness\": \"밝기\",\n  \"red\": \"빨강\",\n  \"saturation\": \"채도\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Mėlyna\",\n  \"brightness\": \"Ryškumas\",\n  \"green\": \"Žalia\",\n  \"hue\": \"Atspalvis\",\n  \"lightness\": \"Šviesumas\",\n  \"red\": \"Raudona\",\n  \"saturation\": \"Įsotinimas\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Zila\",\n  \"brightness\": \"Spilgtums\",\n  \"green\": \"Zaļa\",\n  \"hue\": \"Nokrāsa\",\n  \"lightness\": \"Gaišums\",\n  \"red\": \"Sarkana\",\n  \"saturation\": \"Piesātinājums\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blå\",\n  \"brightness\": \"Lysstyrke\",\n  \"green\": \"Grønn\",\n  \"hue\": \"Fargetone\",\n  \"lightness\": \"Lyshet\",\n  \"red\": \"Rød\",\n  \"saturation\": \"Metning\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blauw\",\n  \"brightness\": \"Helderheid\",\n  \"green\": \"Groen\",\n  \"hue\": \"Kleurtoon\",\n  \"lightness\": \"Lichtsterkte\",\n  \"red\": \"Rood\",\n  \"saturation\": \"Verzadiging\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Niebieski\",\n  \"brightness\": \"Jasność\",\n  \"green\": \"Zielony\",\n  \"hue\": \"Odcień\",\n  \"lightness\": \"Jaskrawość\",\n  \"red\": \"Czerwony\",\n  \"saturation\": \"Nasycenie\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Brilho\",\n  \"green\": \"Verde\",\n  \"hue\": \"Matiz\",\n  \"lightness\": \"Luminosidade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Saturação\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Azul\",\n  \"brightness\": \"Luminosidade\",\n  \"green\": \"Verde\",\n  \"hue\": \"Tonalidade\",\n  \"lightness\": \"Claridade\",\n  \"red\": \"Vermelho\",\n  \"saturation\": \"Saturação\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Albastru\",\n  \"brightness\": \"Luminozitate\",\n  \"green\": \"Verde\",\n  \"hue\": \"Nuanță\",\n  \"lightness\": \"Luminozitate\",\n  \"red\": \"Roșu\",\n  \"saturation\": \"Saturație\"\n}\n", "{\n  \"alpha\": \"Альфа\",\n  \"blue\": \"Синий\",\n  \"brightness\": \"Яркость\",\n  \"green\": \"Зеленый\",\n  \"hue\": \"Оттенок\",\n  \"lightness\": \"Освещенность\",\n  \"red\": \"Красный\",\n  \"saturation\": \"Насыщенность\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modrá\",\n  \"brightness\": \"Jas\",\n  \"green\": \"Zelená\",\n  \"hue\": \"Odtieň\",\n  \"lightness\": \"Svetlosť\",\n  \"red\": \"Červená\",\n  \"saturation\": \"Sýtosť\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Modra\",\n  \"brightness\": \"Svetlost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Barva\",\n  \"lightness\": \"Lahkost\",\n  \"red\": \"Rdeča\",\n  \"saturation\": \"Nasičenost\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Plava\",\n  \"brightness\": \"Osvetljenost\",\n  \"green\": \"Zelena\",\n  \"hue\": \"Nijansa\",\n  \"lightness\": \"Osvetljenje\",\n  \"red\": \"Crvena\",\n  \"saturation\": \"Zasićenje\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Blått\",\n  \"brightness\": \"Ljusstyrka\",\n  \"green\": \"Grönt\",\n  \"hue\": \"Nyans\",\n  \"lightness\": \"Ljushet\",\n  \"red\": \"Rött\",\n  \"saturation\": \"Mättnad\"\n}\n", "{\n  \"alpha\": \"Alfa\",\n  \"blue\": \"Mavi\",\n  \"brightness\": \"Parlaklık\",\n  \"green\": \"Yeşil\",\n  \"hue\": \"Ton\",\n  \"lightness\": \"Canlılık\",\n  \"red\": \"Kırmızı\",\n  \"saturation\": \"Doygunluk\"\n}\n", "{\n  \"alpha\": \"Альфа\",\n  \"blue\": \"Синій\",\n  \"brightness\": \"Яскравість\",\n  \"green\": \"Зелений\",\n  \"hue\": \"Тон\",\n  \"lightness\": \"Освітленість\",\n  \"red\": \"Червоний\",\n  \"saturation\": \"Насиченість\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"蓝色\",\n  \"brightness\": \"亮度\",\n  \"green\": \"绿色\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明亮度\",\n  \"red\": \"红色\",\n  \"saturation\": \"饱和度\"\n}\n", "{\n  \"alpha\": \"Alpha\",\n  \"blue\": \"藍色\",\n  \"brightness\": \"亮度\",\n  \"green\": \"綠色\",\n  \"hue\": \"色相\",\n  \"lightness\": \"明亮\",\n  \"red\": \"紅色\",\n  \"saturation\": \"飽和度\"\n}\n", "/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {Variables, LocalizedString} from './LocalizedStringFormatter';\nexport type {LocalizedStrings} from './LocalizedStringDictionary';\nexport {LocalizedStringDictionary} from './LocalizedStringDictionary';\nexport {LocalizedStringFormatter} from './LocalizedStringFormatter';\n", "/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\nconst localeSymbol = Symbol.for('react-aria.i18n.locale');\nconst stringsSymbol = Symbol.for('react-aria.i18n.strings');\nlet cachedGlobalStrings: {[packageName: string]: LocalizedStringDictionary<any, any>} | null | undefined = undefined;\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.getStringsForLocale(locale);\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n\n  /** Returns all localized strings for the given locale. */\n  getStringsForLocale(locale: string): Record<K, T> {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    return strings;\n  }\n\n  static getGlobalDictionaryForPackage<K extends string = string, T extends LocalizedString = string>(packageName: string): LocalizedStringDictionary<K, T> | null {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    let locale = window[localeSymbol];\n    if (cachedGlobalStrings === undefined) {\n      let globalStrings = window[stringsSymbol];\n      if (!globalStrings) {\n        return null;\n      }\n\n      cachedGlobalStrings = {};\n      for (let pkg in globalStrings) {\n        cachedGlobalStrings[pkg] = new LocalizedStringDictionary({[locale]: globalStrings[pkg]}, locale);\n      }\n    }\n\n    let dictionary = cachedGlobalStrings?.[packageName];\n    if (!dictionary) {\n      throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n    }\n\n    return dictionary;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n", "/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSliderState} from './useSliderState';\n\nexport type {SliderStateOptions} from './useSliderState';\nexport type {SliderState} from './useSliderState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep, useControlledState} from '@react-stately/utils';\nimport {Orientation} from '@react-types/shared';\nimport {SliderProps} from '@react-types/slider';\nimport {useCallback, useMemo, useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * Increments the value of the thumb by the step or page amount.\n   */\n  incrementThumb(index: number, stepSize?: number): void,\n  /**\n   * Decrements the value of the thumb by the step or page amount.\n   */\n  decrementThumb(index: number, stepSize?: number): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number,\n\n  /**\n   * The page size for the slider, used to do a bigger step.\n   */\n  readonly pageSize: number,\n\n  /** The orientation of the slider. */\n  readonly orientation: Orientation,\n\n  /** Whether the slider is disabled. */\n  readonly isDisabled: boolean\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\nexport interface SliderStateOptions<T> extends SliderProps<T> {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState<T extends number | number[]>(props: SliderStateOptions<T>): SliderState {\n  const {\n    isDisabled = false,\n    minValue = DEFAULT_MIN_VALUE,\n    maxValue = DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = DEFAULT_STEP_VALUE,\n    orientation = 'horizontal'\n  } = props;\n\n  // Page step should be at least equal to step and always a multiple of the step.\n  let pageSize = useMemo(() => {\n    let calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  let restrictValues = useCallback((values: number[]) => values?.map((val, idx) => {\n    let min = idx === 0 ? minValue : val[idx - 1];\n    let max = idx === values.length - 1 ? maxValue : val[idx + 1];\n    return snapValueToStep(val, min, max, step);\n  }), [minValue, maxValue, step]);\n\n  let value = useMemo(() => restrictValues(convertValue(props.value)), [props.value]);\n  let defaultValue = useMemo(() => restrictValues(convertValue(props.defaultValue) ?? [minValue]), [props.defaultValue, minValue]);\n  let onChange = createOnChange(props.value, props.defaultValue, props.onChange);\n  let onChangeEnd = createOnChange(props.value, props.defaultValue, props.onChangeEnd);\n\n  const [values, setValuesState] = useControlledState<number[]>(\n    value,\n    defaultValue,\n    onChange\n  );\n  const [isDraggings, setDraggingsState] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(values);\n  const isDraggingsRef = useRef<boolean[]>(isDraggings);\n\n  let setValues = (values: number[]) => {\n    valuesRef.current = values;\n    setValuesState(values);\n  };\n\n  let setDraggings = (draggings: boolean[]) => {\n    isDraggingsRef.current = draggings;\n    setDraggingsState(draggings);\n  };\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    let newValues = replaceIndex(valuesRef.current, index, value);\n    setValues(newValues);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    if (dragging) {\n      valuesRef.current = values;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    incrementThumb,\n    decrementThumb,\n    step,\n    pageSize,\n    orientation,\n    isDisabled\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n\nfunction convertValue(value: number | number[]) {\n  if (value == null) {\n    return undefined;\n  }\n\n  return Array.isArray(value) ? value : [value];\n}\n\nfunction createOnChange(value, defaultValue, onChange) {\n  return (newValue: number[]) => {\n    if (typeof value === 'number' || typeof defaultValue === 'number') {\n      onChange?.(newValue[0]);\n    } else {\n      onChange?.(newValue);\n    }\n  };\n}\n", "/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FormValidationContext, useFormValidationState, DEFAULT_VALIDATION_RESULT, VALID_VALIDITY_STATE, privateValidationStateProp, mergeValidation} from './useFormValidationState';\nexport type {FormValidationState} from './useFormValidationState';\n", "/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createContext, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {Validation, ValidationErrors, ValidationFunction, ValidationResult} from '@react-types/shared';\n\nexport const VALID_VALIDITY_STATE: ValidityState = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true\n};\n\nconst CUSTOM_VALIDITY_STATE: ValidityState = {\n  ...VALID_VALIDITY_STATE,\n  customError: true,\n  valid: false\n};\n\nexport const DEFAULT_VALIDATION_RESULT: ValidationResult = {\n  isInvalid: false,\n  validationDetails: VALID_VALIDITY_STATE,\n  validationErrors: []\n};\n\nexport const FormValidationContext = createContext<ValidationErrors>({});\n\nexport const privateValidationStateProp = '__formValidationState' + Date.now();\n\ninterface FormValidationProps<T> extends Validation<T> {\n  builtinValidation?: ValidationResult,\n  name?: string | string[],\n  value: T\n}\n\nexport interface FormValidationState {\n  /** Realtime validation results, updated as the user edits the value. */\n  realtimeValidation: ValidationResult,\n  /** Currently displayed validation results, updated when the user commits their changes. */\n  displayValidation: ValidationResult,\n  /** Updates the current validation result. Not displayed to the user until `commitValidation` is called. */\n  updateValidation(result: ValidationResult): void,\n  /** Resets the displayed validation state to valid when the user resets the form. */\n  resetValidation(): void,\n  /** Commits the realtime validation so it is displayed to the user. */\n  commitValidation(): void\n}\n\nexport function useFormValidationState<T>(props: FormValidationProps<T>): FormValidationState {\n  // Private prop for parent components to pass state to children.\n  if (props[privateValidationStateProp]) {\n    let {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation} = props[privateValidationStateProp] as FormValidationState;\n    return {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation};\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useFormValidationStateImpl(props);\n}\n\nfunction useFormValidationStateImpl<T>(props: FormValidationProps<T>): FormValidationState {\n  let {isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = 'aria'} = props;\n\n  // backward compatibility.\n  if (validationState) {\n    isInvalid ||= validationState === 'invalid';\n  }\n\n  // If the isInvalid prop is true, update validation result in realtime (controlled).\n  let controlledError: ValidationResult | null = isInvalid ? {\n    isInvalid: true,\n    validationErrors: [],\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n\n  // Perform custom client side validation.\n  let clientError: ValidationResult | null = useMemo(() => getValidationResult(runValidate(validate, value)), [validate, value]);\n\n  if (builtinValidation?.validationDetails.valid) {\n    builtinValidation = null;\n  }\n\n  // Get relevant server errors from the form.\n  let serverErrors = useContext(FormValidationContext);\n  let serverErrorMessages = useMemo(() => {\n    if (name) {\n      return Array.isArray(name) ? name.flatMap(name => asArray(serverErrors[name])) : asArray(serverErrors[name]);\n    }\n    return [];\n  }, [serverErrors, name]);\n\n  // Show server errors when the form gets a new value, and clear when the user changes the value.\n  let [lastServerErrors, setLastServerErrors] = useState(serverErrors);\n  let [isServerErrorCleared, setServerErrorCleared] = useState(false);\n  if (serverErrors !== lastServerErrors) {\n    setLastServerErrors(serverErrors);\n    setServerErrorCleared(false);\n  }\n\n  let serverError: ValidationResult | null = useMemo(() =>\n    getValidationResult(isServerErrorCleared ? [] : serverErrorMessages),\n    [isServerErrorCleared, serverErrorMessages]\n  );\n\n  // Track the next validation state in a ref until commitValidation is called.\n  let nextValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let [currentValidity, setCurrentValidity] = useState(DEFAULT_VALIDATION_RESULT);\n\n  let lastError = useRef(DEFAULT_VALIDATION_RESULT);\n  let commitValidation = () => {\n    if (!commitQueued) {\n      return;\n    }\n\n    setCommitQueued(false);\n    let error = clientError || builtinValidation || nextValidation.current;\n    if (!isEqualValidation(error, lastError.current)) {\n      lastError.current = error;\n      setCurrentValidity(error);\n    }\n  };\n\n  let [commitQueued, setCommitQueued] = useState(false);\n  useEffect(commitValidation);\n\n  // realtimeValidation is used to update the native input element's state based on custom validation logic.\n  // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).\n  // With validationBehavior=\"aria\", all errors are displayed in realtime rather than on submit.\n  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || DEFAULT_VALIDATION_RESULT;\n  let displayValidation = validationBehavior === 'native'\n    ? controlledError || serverError || currentValidity\n    : controlledError || serverError || clientError || builtinValidation || currentValidity;\n\n  return {\n    realtimeValidation,\n    displayValidation,\n    updateValidation(value) {\n      // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.\n      if (validationBehavior === 'aria' && !isEqualValidation(currentValidity, value)) {\n        setCurrentValidity(value);\n      } else {\n        nextValidation.current = value;\n      }\n    },\n    resetValidation() {\n      // Update the currently displayed validation state to valid on form reset,\n      // even if the native validity says it isn't. It'll show again on the next form submit.\n      let error = DEFAULT_VALIDATION_RESULT;\n      if (!isEqualValidation(error, lastError.current)) {\n        lastError.current = error;\n        setCurrentValidity(error);\n      }\n\n      // Do not commit validation after the next render. This avoids a condition where\n      // useSelect calls commitValidation inside an onReset handler.\n      if (validationBehavior === 'native') {\n        setCommitQueued(false);\n      }\n\n      setServerErrorCleared(true);\n    },\n    commitValidation() {\n      // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.\n      // Wait until after the next render to commit so that the latest value has been validated.\n      if (validationBehavior === 'native') {\n        setCommitQueued(true);\n      }\n      setServerErrorCleared(true);\n    }\n  };\n}\n\nfunction asArray<T>(v: T | T[]): T[] {\n  if (!v) {\n    return [];\n  }\n\n  return Array.isArray(v) ? v : [v];\n}\n\nfunction runValidate<T>(validate: ValidationFunction<T>, value: T): string[] {\n  if (typeof validate === 'function') {\n    let e = validate(value);\n    if (e && typeof e !== 'boolean') {\n      return asArray(e);\n    }\n  }\n\n  return [];\n}\n\nfunction getValidationResult(errors: string[]): ValidationResult | null {\n  return errors.length ? {\n    isInvalid: true,\n    validationErrors: errors,\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n}\n\nfunction isEqualValidation(a: ValidationResult | null, b: ValidationResult | null): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return a && b\n    && a.isInvalid === b.isInvalid\n    && a.validationErrors.length === b.validationErrors.length\n    && a.validationErrors.every((a, i) => a === b.validationErrors[i])\n    && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);\n}\n\nexport function mergeValidation(...results: ValidationResult[]): ValidationResult {\n  let errors = new Set<string>();\n  let isInvalid = false;\n  let validationDetails = {\n    ...VALID_VALIDITY_STATE\n  };\n\n  for (let v of results) {\n    for (let e of v.validationErrors) {\n      errors.add(e);\n    }\n\n    // Only these properties apply for checkboxes.\n    isInvalid ||= v.isInvalid;\n    for (let key in validationDetails) {\n      validationDetails[key] ||= v.validationDetails[key];\n    }\n  }\n\n  validationDetails.valid = !isInvalid;\n  return {\n    isInvalid,\n    validationErrors: [...errors],\n    validationDetails\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {ColorAreaState} from './useColorAreaState';\nexport type {ColorSliderState} from './useColorSliderState';\nexport type {ColorWheelState} from './useColorWheelState';\nexport type {ColorFieldState} from './useColorFieldState';\n\nexport {parseColor} from './Color';\nexport {useColorAreaState} from './useColorAreaState';\nexport {useColorSliderState} from './useColorSliderState';\nexport {useColorWheelState} from './useColorWheelState';\nexport {useColorFieldState} from './useColorFieldState';\n\nexport type {Color, ColorAreaProps, ColorFieldProps, ColorWheelProps} from '@react-types/color';\nexport type {ColorSliderStateOptions} from './useColorSliderState';\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, toFixedNumber} from '@react-stately/utils';\nimport {ColorAxes, ColorChannel, ColorChannelRange, ColorFormat, Color as IColor} from '@react-types/color';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {LocalizedStringDictionary} from '@internationalized/string';\nimport {NumberFormatter} from '@internationalized/number';\n\nlet dictionary = new LocalizedStringDictionary(intlMessages);\n\n/** Parses a color from a string value. Throws an error if the string could not be parsed. */\nexport function parseColor(value: string): IColor {\n  let res = RGBColor.parse(value) || HSBColor.parse(value) || HSLColor.parse(value);\n  if (res) {\n    return res;\n  }\n\n  throw new Error('Invalid color value: ' + value);\n}\n\nexport function normalizeColor(v: string | IColor) {\n  if (typeof v === 'string') {\n    return parseColor(v);\n  } else {\n    return v;\n  }\n}\n\nabstract class Color implements IColor {\n  abstract toFormat(format: ColorFormat): IColor;\n  abstract toString(format: ColorFormat | 'css'): string;\n  abstract clone(): IColor;\n  abstract getChannelRange(channel: ColorChannel): ColorChannelRange;\n  abstract formatChannelValue(channel: ColorChannel, locale: string): string;\n\n  toHexInt(): number {\n    return this.toFormat('rgb').toHexInt();\n  }\n\n  getChannelValue(channel: ColorChannel): number {\n    if (channel in this) {\n      return this[channel];\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  withChannelValue(channel: ColorChannel, value: number): IColor {\n    if (channel in this) {\n      let x = this.clone();\n      x[channel] = value;\n      return x;\n    }\n\n    throw new Error('Unsupported color channel: ' + channel);\n  }\n\n  getChannelName(channel: ColorChannel, locale: string) {\n    let strings = LocalizedStringDictionary.getGlobalDictionaryForPackage('@react-stately/color') || dictionary;\n    return strings.getStringForLocale(channel, locale);\n  }\n\n  abstract getColorSpace(): ColorFormat\n  getColorSpaceAxes(xyChannels: {xChannel?: ColorChannel, yChannel?: ColorChannel}): ColorAxes {\n    let {xChannel, yChannel} = xyChannels;\n    let xCh = xChannel || this.getColorChannels().find(c => c !== yChannel);\n    let yCh = yChannel || this.getColorChannels().find(c => c !== xCh);\n    let zCh = this.getColorChannels().find(c => c !== xCh && c !== yCh);\n\n    return {xChannel: xCh, yChannel: yCh, zChannel: zCh};\n  }\n  abstract getColorChannels(): [ColorChannel, ColorChannel, ColorChannel]\n}\nclass RGBColor extends Color {\n  constructor(private red: number, private green: number, private blue: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string) {\n    let colors = [];\n    // matching #rgb, #rgba, #rrggbb, #rrggbbaa\n    if (/^#[\\da-f]+$/i.test(value) && [4, 5, 7, 9].includes(value.length)) {\n      const values = (value.length < 6 ? value.replace(/[^#]/gi, '$&$&') : value).slice(1).split('');\n      while (values.length > 0) {\n        colors.push(parseInt(values.splice(0, 2).join(''), 16));\n      }\n      colors[3] = colors[3] !== undefined ? colors[3] / 255 : undefined;\n    }\n\n    // matching rgb(rrr, ggg, bbb), rgba(rrr, ggg, bbb, 0.a)\n    const match = value.match(/^rgba?\\((.*)\\)$/);\n    if (match?.[1]) {\n      colors = match[1].split(',').map(value => Number(value.trim()));\n      colors = colors.map((num, i) => clamp(num, 0, i < 3 ? 255 : 1));\n    }\n\n    return colors.length < 3 ? undefined : new RGBColor(colors[0], colors[1], colors[2], colors[3] ?? 1);\n  }\n\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0')).toUpperCase();\n      case 'hexa':\n        return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0') + Math.round(this.alpha * 255).toString(16).padStart(2, '0')).toUpperCase();\n      case 'rgb':\n        return `rgb(${this.red}, ${this.green}, ${this.blue})`;\n      case 'css':\n      case 'rgba':\n        return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hex':\n      case 'hexa':\n      case 'rgb':\n      case 'rgba':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      default:\n        throw new Error('Unsupported color conversion: rgb -> ' + format);\n    }\n  }\n\n  toHexInt(): number {\n    return this.red << 16 | this.green << 8 | this.blue;\n  }\n\n  /**\n   * Converts an RGB color value to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const brightness = Math.max(red, green, blue);\n    const chroma = brightness - min;\n    const saturation = brightness === 0 ? 0 : chroma / brightness;\n    let hue = 0; // achromatic\n\n    if (chroma !== 0) {\n      switch (brightness) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSBColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts an RGB color value to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    const red = this.red / 255;\n    const green = this.green / 255;\n    const blue = this.blue / 255;\n    const min = Math.min(red, green, blue);\n    const max = Math.max(red, green, blue);\n    const lightness = (max + min) / 2;\n    const chroma = max - min;\n    let hue: number;\n    let saturation: number;\n\n    if (chroma === 0) {\n      hue = saturation = 0; // achromatic\n    } else {\n      saturation = chroma / (lightness < .5 ? max + min : 2 - max - min);\n\n      switch (max) {\n        case red:\n          hue = (green - blue) / chroma + (green < blue ? 6 : 0);\n          break;\n        case green:\n          hue = (blue - red) / chroma + 2;\n          break;\n        case blue:\n          hue = (red - green) / chroma + 4;\n          break;\n      }\n\n      hue /= 6;\n    }\n\n    return new HSLColor(\n      toFixedNumber(hue * 360, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(lightness * 100, 2),\n      this.alpha);\n  }\n\n  clone(): IColor {\n    return new RGBColor(this.red, this.green, this.blue, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        return {minValue: 0x0, maxValue: 0xFF, step: 0x1, pageSize: 0x11};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'red':\n      case 'green':\n      case 'blue':\n        options = {style: 'decimal'};\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'rgb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['red', 'green', 'blue'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return RGBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsb(X, X%, X%)\n// - hsba(X, X%, X%, X)\nconst HSB_REGEX = /hsb\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsba\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nclass HSBColor extends Color {\n  constructor(private hue: number, private saturation: number, private brightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSBColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSB_REGEX))) {\n      const [h, s, b, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSBColor(mod(h, 360), clamp(s, 0, 100), clamp(b, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'css':\n        return this.toHSL().toString('css');\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsb':\n        return `hsb(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%)`;\n      case 'hsba':\n        return `hsba(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.brightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsb':\n      case 'hsba':\n        return this;\n      case 'hsl':\n      case 'hsla':\n        return this.toHSL();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsb -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSB color to HSL.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.\n   * @returns An HSLColor object.\n   */\n  private toHSL(): IColor {\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let lightness = brightness * (1 - saturation / 2);\n    saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);\n\n    return new HSLColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n        toFixedNumber(lightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSV color value to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let brightness = this.brightness / 100;\n    let fn = (n: number, k = (n + hue / 60) % 6) => brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);\n    return new RGBColor(\n      Math.round(fn(5) * 255),\n      Math.round(fn(3) * 255),\n      Math.round(fn(1) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSBColor(this.hue, this.saturation, this.brightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'brightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'brightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsb';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'brightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSBColor.colorChannels;\n  }\n}\n\n// X = <negative/positive number with/without decimal places>\n// before/after a comma, 0 or more whitespaces are allowed\n// - hsl(X, X%, X%)\n// - hsla(X, X%, X%, X)\nconst HSL_REGEX = /hsl\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%)\\)|hsla\\(([-+]?\\d+(?:.\\d+)?\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d+(?:.\\d+)?%\\s*,\\s*[-+]?\\d(.\\d+)?)\\)/;\n\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\nclass HSLColor extends Color {\n  constructor(private hue: number, private saturation: number, private lightness: number, private alpha: number) {\n    super();\n  }\n\n  static parse(value: string): HSLColor | void {\n    let m: RegExpMatchArray | void;\n    if ((m = value.match(HSL_REGEX))) {\n      const [h, s, l, a] = (m[1] ?? m[2]).split(',').map(n => Number(n.trim().replace('%', '')));\n      return new HSLColor(mod(h, 360), clamp(s, 0, 100), clamp(l, 0, 100), clamp(a ?? 1, 0, 1));\n    }\n  }\n\n  toString(format: ColorFormat | 'css') {\n    switch (format) {\n      case 'hex':\n        return this.toRGB().toString('hex');\n      case 'hexa':\n        return this.toRGB().toString('hexa');\n      case 'hsl':\n        return `hsl(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%)`;\n      case 'css':\n      case 'hsla':\n        return `hsla(${this.hue}, ${toFixedNumber(this.saturation, 2)}%, ${toFixedNumber(this.lightness, 2)}%, ${this.alpha})`;\n      default:\n        return this.toFormat(format).toString(format);\n    }\n  }\n  toFormat(format: ColorFormat): IColor {\n    switch (format) {\n      case 'hsl':\n      case 'hsla':\n        return this;\n      case 'hsb':\n      case 'hsba':\n        return this.toHSB();\n      case 'rgb':\n      case 'rgba':\n        return this.toRGB();\n      default:\n        throw new Error('Unsupported color conversion: hsl -> ' + format);\n    }\n  }\n\n  /**\n   * Converts a HSL color to HSB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.\n   * @returns An HSBColor object.\n   */\n  private toHSB(): IColor {\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);\n    saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);\n    return new HSBColor(\n      toFixedNumber(this.hue, 2),\n      toFixedNumber(saturation * 100, 2),\n      toFixedNumber(brightness * 100, 2),\n      this.alpha\n    );\n  }\n\n  /**\n   * Converts a HSL color to RGB.\n   * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.\n   * @returns An RGBColor object.\n   */\n  private toRGB(): IColor {\n    let hue = this.hue;\n    let saturation = this.saturation / 100;\n    let lightness = this.lightness / 100;\n    let a = saturation * Math.min(lightness, 1 - lightness);\n    let fn = (n: number, k = (n + hue / 30) % 12) => lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return new RGBColor(\n      Math.round(fn(0) * 255),\n      Math.round(fn(8) * 255),\n      Math.round(fn(4) * 255),\n      this.alpha\n    );\n  }\n\n  clone(): IColor {\n    return new HSLColor(this.hue, this.saturation, this.lightness, this.alpha);\n  }\n\n  getChannelRange(channel: ColorChannel): ColorChannelRange {\n    switch (channel) {\n      case 'hue':\n        return {minValue: 0, maxValue: 360, step: 1, pageSize: 15};\n      case 'saturation':\n      case 'lightness':\n        return {minValue: 0, maxValue: 100, step: 1, pageSize: 10};\n      case 'alpha':\n        return {minValue: 0, maxValue: 1, step: 0.01, pageSize: 0.1};\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n  }\n\n  formatChannelValue(channel: ColorChannel, locale: string) {\n    let options: Intl.NumberFormatOptions;\n    let value = this.getChannelValue(channel);\n    switch (channel) {\n      case 'hue':\n        options = {style: 'unit', unit: 'degree', unitDisplay: 'narrow'};\n        break;\n      case 'saturation':\n      case 'lightness':\n        options = {style: 'percent'};\n        value /= 100;\n        break;\n      case 'alpha':\n        options = {style: 'percent'};\n        break;\n      default:\n        throw new Error('Unknown color channel: ' + channel);\n    }\n    return new NumberFormatter(locale, options).format(value);\n  }\n\n  getColorSpace(): ColorFormat {\n    return 'hsl';\n  }\n\n  private static colorChannels: [ColorChannel, ColorChannel, ColorChannel] = ['hue', 'saturation', 'lightness'];\n  getColorChannels(): [ColorChannel, ColorChannel, ColorChannel] {\n    return HSLColor.colorChannels;\n  }\n}\n", "const _temp0 = require(\"../intl/ar-AE.json\");\nconst _temp1 = require(\"../intl/bg-BG.json\");\nconst _temp2 = require(\"../intl/cs-CZ.json\");\nconst _temp3 = require(\"../intl/da-DK.json\");\nconst _temp4 = require(\"../intl/de-DE.json\");\nconst _temp5 = require(\"../intl/el-GR.json\");\nconst _temp6 = require(\"../intl/en-US.json\");\nconst _temp7 = require(\"../intl/es-ES.json\");\nconst _temp8 = require(\"../intl/et-EE.json\");\nconst _temp9 = require(\"../intl/fi-FI.json\");\nconst _temp10 = require(\"../intl/fr-FR.json\");\nconst _temp11 = require(\"../intl/he-IL.json\");\nconst _temp12 = require(\"../intl/hr-HR.json\");\nconst _temp13 = require(\"../intl/hu-HU.json\");\nconst _temp14 = require(\"../intl/it-IT.json\");\nconst _temp15 = require(\"../intl/ja-JP.json\");\nconst _temp16 = require(\"../intl/ko-KR.json\");\nconst _temp17 = require(\"../intl/lt-LT.json\");\nconst _temp18 = require(\"../intl/lv-LV.json\");\nconst _temp19 = require(\"../intl/nb-NO.json\");\nconst _temp20 = require(\"../intl/nl-NL.json\");\nconst _temp21 = require(\"../intl/pl-PL.json\");\nconst _temp22 = require(\"../intl/pt-BR.json\");\nconst _temp23 = require(\"../intl/pt-PT.json\");\nconst _temp24 = require(\"../intl/ro-RO.json\");\nconst _temp25 = require(\"../intl/ru-RU.json\");\nconst _temp26 = require(\"../intl/sk-SK.json\");\nconst _temp27 = require(\"../intl/sl-SI.json\");\nconst _temp28 = require(\"../intl/sr-SP.json\");\nconst _temp29 = require(\"../intl/sv-SE.json\");\nconst _temp30 = require(\"../intl/tr-TR.json\");\nconst _temp31 = require(\"../intl/uk-UA.json\");\nconst _temp32 = require(\"../intl/zh-CN.json\");\nconst _temp33 = require(\"../intl/zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep, useControlledState} from '@react-stately/utils';\nimport {Color, ColorAreaProps, ColorChannel} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface ColorAreaState {\n  /** The current color value displayed by the color area. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the horizontal axis channel displayed by the color area. */\n  xValue: number,\n  /** Sets the value for the horizontal axis channel displayed by the color area, and triggers `onChange`. */\n  setXValue(value: number): void,\n\n  /** The current value of the vertical axis channel displayed by the color area. */\n  yValue: number,\n  /** Sets the value for the vertical axis channel displayed by the color area, and triggers `onChange`. */\n  setYValue(value: number): void,\n\n  /** Sets the x and y channels of the current color value based on a percentage of the width and height of the color area, and triggers `onChange`. */\n  setColorFromPoint(x: number, y: number): void,\n  /** Returns the coordinates of the thumb relative to the upper left corner of the color area as a percentage. */\n  getThumbPosition(): {x: number, y: number},\n\n  /** Increments the value of the horizontal axis channel by the channel step or page amount. */\n  incrementX(stepSize?: number): void,\n  /** Decrements the value of the horizontal axis channel by the channel step or page amount. */\n  decrementX(stepSize?: number): void,\n\n  /** Increments the value of the vertical axis channel by the channel step or page amount. */\n  incrementY(stepSize?: number): void,\n  /** Decrements the value of the vertical axis channel by the channel step or page amount. */\n  decrementY(stepSize?: number): void,\n\n  /** Whether the color area is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color area is being dragged. */\n  setDragging(value: boolean): void,\n\n  /** Returns the xChannel, yChannel and zChannel names based on the color value. */\n  channels: {xChannel: ColorChannel, yChannel: ColorChannel, zChannel: ColorChannel},\n  /** The step value of the xChannel, used when incrementing and decrementing. */\n  xChannelStep: number,\n  /** The step value of the yChannel, used when incrementing and decrementing. */\n  yChannelStep: number,\n  /** The page step value of the xChannel, used when incrementing and decrementing. */\n  xChannelPageStep: number,\n  /** The page step value of the yChannel, used when incrementing and decrementing. */\n  yChannelPageStep: number,\n\n  /** Returns the color that should be displayed in the color area thumb instead of `value`. */\n  getDisplayColor(): Color\n}\n\nconst DEFAULT_COLOR = parseColor('#ffffff');\n/**\n * Provides state management for a color area component.\n * Color area allows users to adjust two channels of an HSL, HSB or RGB color value against a two-dimensional gradient background.\n */\nexport function useColorAreaState(props: ColorAreaProps): ColorAreaState {\n  let {\n    value,\n    defaultValue,\n    xChannel,\n    yChannel,\n    onChange,\n    onChangeEnd\n  } = props;\n\n  if (!value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [color, setColorState] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(color);\n  let setColor = (color: Color) => {\n    valueRef.current = color;\n    setColorState(color);\n  };\n\n  let channels = useMemo(() =>\n    color.getColorSpaceAxes({xChannel, yChannel}),\n    [color, xChannel, yChannel]\n  );\n\n  let xChannelRange = color.getChannelRange(channels.xChannel);\n  let yChannelRange = color.getChannelRange(channels.yChannel);\n  let {minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX} = xChannelRange;\n  let {minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY} = yChannelRange;\n\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false);\n\n  let xValue = color.getChannelValue(channels.xChannel);\n  let yValue = color.getChannelValue(channels.yChannel);\n  let setXValue = (v: number) => {\n    if (v === xValue) {\n      return;\n    }\n    let newColor = color.withChannelValue(channels.xChannel, v);\n    setColor(newColor);\n  };\n  let setYValue = (v: number) => {\n    if (v === yValue) {\n      return;\n    }\n    let newColor = color.withChannelValue(channels.yChannel, v);\n    setColor(newColor);\n  };\n\n  return {\n    channels,\n    xChannelStep: stepX,\n    yChannelStep: stepY,\n    xChannelPageStep: pageSizeX,\n    yChannelPageStep: pageSizeY,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    xValue,\n    setXValue,\n    yValue,\n    setYValue,\n    setColorFromPoint(x: number, y: number) {\n      let newXValue = minValueX + clamp(x, 0, 1) * (maxValueX - minValueX);\n      let newYValue = minValueY + (1 - clamp(y, 0, 1)) * (maxValueY - minValueY);\n      let newColor:Color;\n      if (newXValue !== xValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newXValue = snapValueToStep(newXValue, minValueX, maxValueX, stepX);\n        newColor = color.withChannelValue(channels.xChannel, newXValue);\n      }\n      if (newYValue !== yValue) {\n        // Round new value to multiple of step, clamp value between min and max\n        newYValue = snapValueToStep(newYValue, minValueY, maxValueY, stepY);\n        newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);\n      }\n      if (newColor) {\n        setColor(newColor);\n      }\n    },\n    getThumbPosition() {\n      let x = (xValue - minValueX) / (maxValueX - minValueX);\n      let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);\n      return {x, y};\n    },\n    incrementX(stepSize) {\n      setXValue(xValue + stepSize > maxValueX ? maxValueX : snapValueToStep(xValue + stepSize, minValueX, maxValueX, stepX));\n    },\n    incrementY(stepSize) {\n      setYValue(yValue + stepSize > maxValueY ? maxValueY : snapValueToStep(yValue + stepSize, minValueY, maxValueY, stepY));\n    },\n    decrementX(stepSize) {\n      setXValue(snapValueToStep(xValue - stepSize, minValueX, maxValueX, stepX));\n    },\n    decrementY(stepSize) {\n      setYValue(snapValueToStep(yValue - stepSize, minValueY, maxValueY, stepY));\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef.current;\n      isDraggingRef.current = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return color.withChannelValue('alpha', 1);\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorSliderProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {SliderState, useSliderState} from '@react-stately/slider';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ColorSliderState extends SliderState {\n  /** The current color value represented by the color slider. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n  /** Returns the color that should be displayed in the slider instead of `value` or the optional parameter. */\n  getDisplayColor(): Color\n}\n\n\nexport interface ColorSliderStateOptions extends ColorSliderProps {\n  /** The locale to use for formatting the color channel value. */\n  locale: string\n}\n\n/**\n * Provides state management for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSliderState(props: ColorSliderStateOptions): ColorSliderState {\n  let {channel, value, defaultValue, onChange, locale, ...otherProps} = props;\n  if (value == null && defaultValue == null) {\n    throw new Error('useColorSliderState requires a value or defaultValue');\n  }\n\n  let [color, setColor] = useControlledState(value && normalizeColor(value), defaultValue && normalizeColor(defaultValue), onChange);\n  let sliderState = useSliderState({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.\n    numberFormatter: null,\n    value: color.getChannelValue(channel),\n    onChange(v) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd(v) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) {\n        props.onChangeEnd(color.withChannelValue(channel, v));\n      }\n    }\n  });\n\n  let {step, pageSize} = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return parseColor(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha': {\n          return color;\n        }\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step,\n    pageSize\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorWheelProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface ColorWheelState {\n  /** The current color value represented by the color wheel. */\n  readonly value: Color,\n  /** Sets the color value represented by the color wheel, and triggers `onChange`. */\n  setValue(value: string | Color): void,\n\n  /** The current value of the hue channel displayed by the color wheel. */\n  readonly hue: number,\n  /** Sets the hue channel of the current color value and triggers `onChange`. */\n  setHue(value: number): void,\n\n  /** Sets the hue channel of the current color value based on the given coordinates and radius of the color wheel, and triggers `onChange`. */\n  setHueFromPoint(x: number, y: number, radius: number): void,\n  /** Returns the coordinates of the thumb relative to the center point of the color wheel. */\n  getThumbPosition(radius: number): {x: number, y: number},\n\n  /** Increments the hue by the given amount (defaults to 1). */\n  increment(stepSize?: number): void,\n  /** Decrements the hue by the given amount (defaults to 1). */\n  decrement(stepSize?: number): void,\n\n  /** Whether the color wheel is currently being dragged. */\n  readonly isDragging: boolean,\n  /** Sets whether the color wheel is being dragged. */\n  setDragging(value: boolean): void,\n  /** Returns the color that should be displayed in the color wheel instead of `value`. */\n  getDisplayColor(): Color,\n  /** The step value of the hue channel, used when incrementing and decrementing. */\n  step: number,\n  /** The page step value of the hue channel, used when incrementing and decrementing. */\n  pageStep: number\n}\n\nconst DEFAULT_COLOR = parseColor('hsl(0, 100%, 50%)');\n\nfunction roundToStep(value: number, step: number): number {\n  return Math.round(value / step) * step;\n}\n\nfunction mod(n: number, m: number) {\n  return ((n % m) + m) % m;\n}\n\nfunction roundDown(v: number) {\n  let r = Math.floor(v);\n  if (r === v) {\n    return v - 1;\n  } else {\n    return r;\n  }\n}\n\nfunction degToRad(deg: number) {\n  return deg * Math.PI / 180;\n}\n\nfunction radToDeg(rad: number) {\n  return rad * 180 / Math.PI;\n}\n\n// 0deg = 3 o'clock. increases clockwise\nfunction angleToCartesian(angle: number, radius: number): {x: number, y: number} {\n  let rad = degToRad(360 - angle + 90);\n  let x = Math.sin(rad) * (radius);\n  let y = Math.cos(rad) * (radius);\n  return {x, y};\n}\n\nfunction cartesianToAngle(x: number, y: number, radius: number): number {\n  let deg = radToDeg(Math.atan2(y / radius, x / radius));\n  return (deg + 360) % 360;\n}\n\n/**\n * Provides state management for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorWheelState(props: ColorWheelProps): ColorWheelState {\n  let {defaultValue, onChange, onChangeEnd} = props;\n\n  if (!props.value && !defaultValue) {\n    defaultValue = DEFAULT_COLOR;\n  }\n\n  let [value, setValueState] = useControlledState(normalizeColor(props.value), normalizeColor(defaultValue), onChange);\n  let valueRef = useRef(value);\n  let setValue = (value: Color) => {\n    valueRef.current = value;\n    setValueState(value);\n  };\n\n  let channelRange = value.getChannelRange('hue');\n  let {minValue: minValueX, maxValue: maxValueX, step: step, pageSize: pageStep} = channelRange;\n  let [isDragging, setDragging] = useState(false);\n  let isDraggingRef = useRef(false);\n\n  let hue = value.getChannelValue('hue');\n  function setHue(v: number) {\n    if (v > 360) {\n      // Make sure you can always get back to 0.\n      v = 0;\n    }\n    v = roundToStep(mod(v, 360), step);\n    if (hue !== v) {\n      let color = value.withChannelValue('hue', v);\n      setValue(color);\n    }\n  }\n\n  return {\n    value,\n    step,\n    pageStep,\n    setValue(v) {\n      let color = normalizeColor(v);\n      setValue(color);\n    },\n    hue,\n    setHue,\n    setHueFromPoint(x, y, radius) {\n      setHue(cartesianToAngle(x, y, radius));\n    },\n    getThumbPosition(radius) {\n      return angleToCartesian(value.getChannelValue('hue'), radius);\n    },\n    increment(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      let newValue = hue + s;\n      if (newValue >= maxValueX) {\n        // Make sure you can always get back to 0.\n        newValue = minValueX;\n      }\n      setHue(roundToStep(mod(newValue, 360), s));\n    },\n    decrement(stepSize = 1) {\n      let s = Math.max(stepSize, step);\n      if (hue === 0) {\n        // We can't just subtract step because this might be the case:\n        // |(previous step) - 0| < step size\n        setHue(roundDown(360 / s) * s);\n      } else {\n        setHue(roundToStep(mod(hue - s, 360), s));\n      }\n    },\n    setDragging(isDragging) {\n      let wasDragging = isDraggingRef.current;\n      isDraggingRef.current = isDragging;\n\n      if (onChangeEnd && !isDragging && wasDragging) {\n        onChangeEnd(valueRef.current);\n      }\n\n      setDragging(isDragging);\n    },\n    isDragging,\n    getDisplayColor() {\n      return value.toFormat('hsl').withChannelValue('saturation', 100).withChannelValue('lightness', 50).withChannelValue('alpha', 1);\n    }\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorFieldProps} from '@react-types/color';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {parseColor} from './Color';\nimport {useColor} from './useColor';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface ColorFieldState extends FormValidationState {\n  /**\n   * The current text value of the input. Updated as the user types,\n   * and formatted according to `formatOptions` on blur.\n   */\n  readonly inputValue: string,\n  /**\n   * The currently parsed color value, or null if the field is empty.\n   * Updated based on the `inputValue` as the user types.\n   */\n  readonly colorValue: Color,\n  /** Sets the current text value of the input. */\n  setInputValue(value: string): void,\n  /**\n   * Updates the input value based on the currently parsed color value.\n   * Typically this is called when the field is blurred.\n   */\n  commit(): void,\n  /** Increments the current input value to the next step boundary, and fires `onChange`. */\n  increment(): void,\n  /** Decrements the current input value to the next step boundary, and fires `onChange`. */\n  decrement(): void,\n  /** Sets the current value to the maximum color value, and fires `onChange`. */\n  incrementToMax(): void,\n  /** Sets the current value to the minimum color value, and fires `onChange`. */\n  decrementToMin(): void,\n  /**\n   * Validates a user input string.\n   * Values can be partially entered, and may be valid even if they cannot currently be parsed to a color.\n   * Can be used to implement validation as a user types.\n   */\n  validate(value: string): boolean\n}\n\nconst MIN_COLOR = parseColor('#000000');\nconst MAX_COLOR = parseColor('#FFFFFF');\nconst MIN_COLOR_INT = MIN_COLOR.toHexInt();\nconst MAX_COLOR_INT = MAX_COLOR.toHexInt();\n\n/**\n * Provides state management for a color field component. Color fields allow\n * users to enter and adjust a hex color value.\n */\nexport function useColorFieldState(\n  props: ColorFieldProps\n): ColorFieldState {\n  let {\n    value,\n    defaultValue,\n    onChange\n  } = props;\n  let {step} = MIN_COLOR.getChannelRange('red');\n\n  let initialValue = useColor(value);\n  let initialDefaultValue = useColor(defaultValue);\n  let [colorValue, setColorValue] = useControlledState<Color>(initialValue, initialDefaultValue, onChange);\n  let [inputValue, setInputValue] = useState(() => (value || defaultValue) && colorValue ? colorValue.toString('hex') : '');\n\n  let validation = useFormValidationState({\n    ...props,\n    value: colorValue\n  });\n\n  let safelySetColorValue = (newColor: Color) => {\n    if (!colorValue || !newColor) {\n      setColorValue(newColor);\n      return;\n    }\n    if (newColor.toHexInt() !== colorValue.toHexInt()) {\n      setColorValue(newColor);\n      return;\n    }\n  };\n\n  let [prevValue, setPrevValue] = useState(colorValue);\n  if (prevValue !== colorValue) {\n    setInputValue(colorValue ? colorValue.toString('hex') : '');\n    setPrevValue(colorValue);\n  }\n\n  let parsedValue = useMemo(() => {\n    let color;\n    try {\n      color = parseColor(inputValue.startsWith('#') ? inputValue : `#${inputValue}`);\n    } catch (err) {\n      color = null;\n    }\n    return color;\n  }, [inputValue]);\n\n  let commit = () => {\n    // Set to empty state if input value is empty\n    if (!inputValue.length) {\n      safelySetColorValue(null);\n      setInputValue(value === undefined ? '' : colorValue.toString('hex'));\n      return;\n    }\n\n    // if it failed to parse, then reset input to formatted version of current number\n    if (parsedValue == null) {\n      setInputValue(colorValue ? colorValue.toString('hex') : '');\n      return;\n    }\n\n    safelySetColorValue(parsedValue);\n    // in a controlled state, the numberValue won't change, so we won't go back to our old input without help\n    let newColorValue = '';\n    if (colorValue) {\n      newColorValue = colorValue.toString('hex');\n    }\n    setInputValue(newColorValue);\n  };\n\n  let increment = () => {\n    let newValue = addColorValue(parsedValue, step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n    validation.commitValidation();\n  };\n  let decrement = () => {\n    let newValue = addColorValue(parsedValue, -step);\n    // if we've arrived at the same value that was previously in the state, the\n    // input value should be updated to match\n    // ex type 4, press increment, highlight the number in the input, type 4 again, press increment\n    // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input\n    if (newValue === colorValue) {\n      setInputValue(newValue.toString('hex'));\n    }\n    safelySetColorValue(newValue);\n    validation.commitValidation();\n  };\n  let incrementToMax = () => safelySetColorValue(MAX_COLOR);\n  let decrementToMin = () => safelySetColorValue(MIN_COLOR);\n\n  let validate = (value: string) => value === '' || !!value.match(/^#?[0-9a-f]{0,6}$/i)?.[0];\n\n  return {\n    ...validation,\n    validate,\n    colorValue,\n    inputValue,\n    setInputValue,\n    commit,\n    increment,\n    incrementToMax,\n    decrement,\n    decrementToMin\n  };\n}\n\nfunction addColorValue(color: Color, step: number) {\n  let newColor = color ? color : MIN_COLOR;\n  let colorInt = newColor.toHexInt();\n\n  let clampInt = Math.min(Math.max(colorInt + step, MIN_COLOR_INT), MAX_COLOR_INT);\n  if (clampInt !== colorInt) {\n    let newColorString = `#${clampInt.toString(16).padStart(6, '0').toUpperCase()}`;\n    newColor = parseColor(newColorString);\n  }\n  return newColor;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useMemo} from 'react';\n\nexport function useColor(value: string | Color | undefined | null) {\n  return useMemo(() => {\n    if (typeof value === 'string') {\n      try {\n        return parseColor(value);\n      } catch (err) {\n        return undefined;\n      }\n    }\n    return value;\n  }, [value]);\n}\n"],
  "mappings": "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",
  "names": ["$aTwux$useMemo", "$aTwux$useCallback", "values", "$aTwux$useState", "$aTwux$useRef", "value", "$jcIOw$createContext", "$jcIOw$useMemo", "$jcIOw$useContext", "name", "$jcIOw$useState", "$jcIOw$useRef", "$jcIOw$useEffect", "value", "a", "value", "$cBgAy$useRef", "color", "$cBgAy$useMemo", "$cBgAy$useState", "isDragging"]
}
