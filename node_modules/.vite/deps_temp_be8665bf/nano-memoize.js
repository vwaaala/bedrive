import {
  __commonJS
} from "./chunk-J32WSRGE.js";

// node_modules/nano-memoize/index.js
var require_nano_memoize = __commonJS({
  "node_modules/nano-memoize/index.js"(exports, module) {
    (function() {
      "use strict";
      var assign = Object.assign;
      if (typeof assign !== "function") {
        assign = function() {
          var a = arguments, o = arguments[0];
          if (o === null || o === void 0) {
            throw new TypeError("Cannot convert undefined or null to object");
          }
          o = Object(o);
          for (var i = 1; i < a.length; i++) {
            if (a[i] && typeof a[i] === "object") {
              for (var k in a[i]) {
                o[k] = a[i][k];
              }
            }
          }
          return o;
        };
      }
      function vrgs(f) {
        var s = f + "", i = s.indexOf("...");
        return i >= 0 && (i < s.indexOf(")") || s.indexOf("arguments") >= 0);
      }
      function nanomemoize(fn, o) {
        o || (o = {});
        var vargs = o.vargs || vrgs(fn), s = /* @__PURE__ */ Object.create(null), k = [], v = [], z, wm = /* @__PURE__ */ new WeakMap(), d = function(key, c2, k2) {
          return setTimeout(function() {
            if (k2) {
              c2.splice(key, 1);
              k2.splice(key, 1);
              return;
            }
            c2 instanceof WeakMap ? c2.delete(key) : delete c2[key];
          }, o.maxAge);
        }, c = o.maxAge > 0 && o.maxAge < Infinity ? d : 0, eq = o.equals ? o.equals : function(a, b) {
          return a === b;
        }, maxargs = o.maxArgs, srlz = o.serializer, f, u;
        if (fn.length === 1 && !o.equals && !vargs) {
          f = (function(a) {
            var t = typeof a;
            if (!srlz && (t === "object" && a || t === "function")) {
              var r;
              return wm.get(a) || (!c || c(a, wm), wm.set(a, r = fn.call(this, a)), r);
            }
            var key = t === "number" || t === "boolean" || a == null ? a : t === "string" ? JSON.stringify(a) : srlz(a);
            return s[key] || (!c || c(key, s), s[key] = fn.call(this, a));
          }).bind(this);
          u = 1;
        } else {
          f = (function() {
            var al = arguments.length;
            if (!al && z != null)
              return v[z];
            var l = maxargs || al, i;
            for (i = k.length - 1; i >= 0; i--) {
              if (!maxargs && k[i].length !== l)
                continue;
              for (var j = l - 1; j >= 0 && eq(k[i][j], arguments[j]); j--) {
                if (j === 0) {
                  return v[i];
                }
              }
            }
            i = k.length - (i + 1);
            if (!al && z == null)
              z = i;
            return !c || c(i, v, k), v[i] = fn.apply(this, k[i] = arguments);
          }).bind(this);
        }
        f.clear = function() {
          wm = /* @__PURE__ */ new WeakMap();
          s = /* @__PURE__ */ Object.create(null);
          k = [];
          v = [];
          z = void 0;
        };
        f.keys = function() {
          return u ? null : k.slice();
        };
        f.values = function() {
          return u ? null : v.slice();
        };
        f.keyValues = function() {
          return u ? { primitives: assign({}, s), objects: wm } : null;
        };
        return f;
      }
      if (typeof module !== "undefined") {
        module.exports = nanomemoize;
      }
      if (typeof window !== "undefined") {
        window.nanomemoize = nanomemoize;
      }
    }).call(exports);
  }
});
export default require_nano_memoize();
//# sourceMappingURL=nano-memoize.js.map
