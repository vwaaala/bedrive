{"version":3,"file":"use-resume-subscription-c4c1a8ac.mjs","sources":["../../../common/resources/client/billing/billing-page/requests/use-cancel-subscription.ts","../../../common/resources/client/billing/billing-page/requests/use-resume-subscription.ts"],"sourcesContent":["import {useMutation} from '@tanstack/react-query';\nimport {apiClient} from '../../../http/query-client';\nimport {useTrans} from '../../../i18n/use-trans';\nimport {BackendResponse} from '../../../http/backend-response/backend-response';\nimport {toast} from '../../../ui/toast/toast';\nimport {message} from '../../../i18n/message';\nimport {User} from '../../../auth/user';\nimport {showHttpErrorToast} from '../../../utils/http/show-http-error-toast';\n\ninterface Response extends BackendResponse {\n  user: User;\n}\n\ninterface Payload {\n  subscriptionId: number;\n  delete?: boolean;\n}\n\nexport function useCancelSubscription() {\n  const {trans} = useTrans();\n  return useMutation({\n    mutationFn: (props: Payload) => cancelSubscription(props),\n    onSuccess: (response, payload) => {\n      toast(\n        payload.delete\n          ? trans(message('Subscription deleted.'))\n          : trans(message('Subscription cancelled.')),\n      );\n    },\n    onError: err => showHttpErrorToast(err),\n  });\n}\n\nfunction cancelSubscription({\n  subscriptionId,\n  ...payload\n}: Payload): Promise<Response> {\n  return apiClient\n    .post(`billing/subscriptions/${subscriptionId}/cancel`, payload)\n    .then(r => r.data);\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient} from '../../../http/query-client';\nimport {useTrans} from '../../../i18n/use-trans';\nimport {BackendResponse} from '../../../http/backend-response/backend-response';\nimport {toast} from '../../../ui/toast/toast';\nimport {message} from '../../../i18n/message';\nimport {User} from '../../../auth/user';\nimport {showHttpErrorToast} from '../../../utils/http/show-http-error-toast';\n\ninterface Response extends BackendResponse {\n  user: User;\n}\n\ninterface Payload {\n  subscriptionId: number;\n}\n\nexport function useResumeSubscription() {\n  const {trans} = useTrans();\n  return useMutation({\n    mutationFn: (props: Payload) => resumeSubscription(props),\n    onSuccess: () => {\n      toast(trans(message('Subscription renewed.')));\n    },\n    onError: err => showHttpErrorToast(err),\n  });\n}\n\nfunction resumeSubscription({subscriptionId}: Payload): Promise<Response> {\n  return apiClient\n    .post(`billing/subscriptions/${subscriptionId}/resume`)\n    .then(r => r.data);\n}\n"],"names":[],"mappings":";;AAkBO,SAAS,wBAAwB;AAChC,QAAA,EAAC,UAAS;AAChB,SAAO,YAAY;AAAA,IACjB,YAAY,CAAC,UAAmB,mBAAmB,KAAK;AAAA,IACxD,WAAW,CAAC,UAAU,YAAY;AAChC;AAAA,QACE,QAAQ,SACJ,MAAM,QAAQ,uBAAuB,CAAC,IACtC,MAAM,QAAQ,yBAAyB,CAAC;AAAA,MAAA;AAAA,IAEhD;AAAA,IACA,SAAS,CAAO,QAAA,mBAAmB,GAAG;AAAA,EAAA,CACvC;AACH;AAEA,SAAS,mBAAmB;AAAA,EAC1B;AAAA,EACA,GAAG;AACL,GAA+B;AACtB,SAAA,UACJ,KAAK,yBAAyB,cAAc,WAAW,OAAO,EAC9D,KAAK,CAAK,MAAA,EAAE,IAAI;AACrB;ACvBO,SAAS,wBAAwB;AAChC,QAAA,EAAC,UAAS;AAChB,SAAO,YAAY;AAAA,IACjB,YAAY,CAAC,UAAmB,mBAAmB,KAAK;AAAA,IACxD,WAAW,MAAM;AACf,YAAM,MAAM,QAAQ,uBAAuB,CAAC,CAAC;AAAA,IAC/C;AAAA,IACA,SAAS,CAAO,QAAA,mBAAmB,GAAG;AAAA,EAAA,CACvC;AACH;AAEA,SAAS,mBAAmB,EAAC,kBAA6C;AACjE,SAAA,UACJ,KAAK,yBAAyB,cAAc,SAAS,EACrD,KAAK,CAAK,MAAA,EAAE,IAAI;AACrB;"}