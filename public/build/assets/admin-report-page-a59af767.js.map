{"version":3,"mappings":"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","names":["Endpoint","useAdminReport","payload","useQuery","fetchAnalyticsReport","keepPreviousData","types","dateRange","params","apiClient","response","ChartLayout","props","title","description","children","className","contentIsFlex","contentClassName","contentRef","minHeight","jsxs","clsx","jsx","ChartLoadingIndicator","ProgressCircle","Trans","LazyChart","lazy","BaseChart","isLoading","Suspense","formatReportData","report","localeCode","shareFirstDatasetLabels","firstDatasetLabels","dataset","datasetIndex","data","datasetItem","itemIndex","label","generateDatasetLabels","datum","granularity","locale","generateTimeLabels","isoDate","isoEndDate","date","parseAbsoluteToLocal","endDate","getFormatter","memoize","options","DateFormatter","a","b","shallowEqual","primaryColor","getBootstrapData","ChartColors","LineChartOptions","LineChart","useSelectedLocale","formattedData","useMemo","i","PolarAreaChartOptions","PolarAreaChart","d","c","BarChart","direction","individualBarColors","isHorizontal","themeValueToHex","value","parseColor","loaderUrl","useGoogleGeoChart","placeholderRef","country","onCountrySelected","trans","useTrans","analytics","useSettings","apiKey","selectedTheme","useThemeSelector","geoChartRef","useRef","regionInteractivity","drawGoogleChart","useCallback","seedData","location","message","backgroundColor","_a","_b","initGoogleGeoChart","lazyLoader","useEffect","InfoDialogTriggerIcon","createSvgIcon","InfoDialogTrigger","body","dialogSize","DialogTrigger","IconButton","Dialog","DialogHeader","DialogBody","FormattedCountryName","memo","countryCode","regionNames","formattedName","Fragment","GeoChart","metricData","layoutProps","initialData","InfoTrigger","Button","ArrowBackIcon","AdminReportPageColGap","rowClassName","VisitorsReportCharts","totalViews","FormattedNumber","AdminHeaderReport","ReportItem","icon","isValidElement","cloneElement","IconEl","createSvgIconFromTree","AnimatePresence","m","opacityAnimation","Skeleton","FormattedValue","TrendingIndicator","FormattedBytes","percentage","calculatePercentage","TrendingUpIcon","TrendingFlatIcon","TrendingDownIcon","percentageChange","previousValue","currentValue","monthDayFormat","ReportDateSelector","onChange","disabled","compactOnMobile","enableCompare","isMobile","useIsMobileMediaQuery","DateRangeIcon","FormattedDateTimeRange","DateFormatPresets","DateSelectorDialog","state","useDateRangePickerState","compareHasInitialValue","compareState","DateRangeComparePresets","DateRangeDialog","AdminReportPage","setDateRange","useState","DateRangePresets","StaticPageTitle"],"sources":["../../../common/resources/client/admin/analytics/use-admin-report.ts","../../../common/resources/client/charts/chart-layout.tsx","../../../common/resources/client/charts/chart-loading-indicator.tsx","../../../common/resources/client/charts/base-chart.tsx","../../../common/resources/client/charts/data/format-report-data.ts","../../../common/resources/client/charts/chart-colors.tsx","../../../common/resources/client/charts/line-chart.tsx","../../../common/resources/client/charts/polar-area-chart.tsx","../../../common/resources/client/charts/bar-chart.tsx","../../../common/resources/client/ui/themes/utils/theme-value-to-hex.ts","../../../common/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/resources/client/i18n/formatted-country-name.tsx","../../../common/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/resources/client/admin/analytics/admin-header-report.tsx","../../../common/resources/client/admin/analytics/report-date-selector.tsx","../../../common/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {keepPreviousData, useQuery} from '@tanstack/react-query';\nimport {BackendResponse} from '../../http/backend-response/backend-response';\nimport {apiClient} from '../../http/query-client';\nimport {VisitorsReportData} from './visitors-report-data';\nimport {IconTree} from '../../icons/create-svg-icon';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {ReactElement} from 'react';\nimport {SvgIconProps} from '@common/icons/svg-icon';\n\nconst Endpoint = 'admin/reports';\n\nexport interface HeaderDatum {\n  icon: IconTree[] | ReactElement<SvgIconProps>;\n  name: string;\n  type?: 'number' | 'fileSize' | 'percentage';\n  currentValue: number;\n  previousValue?: number;\n  percentageChange?: number;\n}\n\ninterface FetchAnalyticsReportResponse extends BackendResponse {\n  visitorsReport: VisitorsReportData;\n  headerReport: HeaderDatum[];\n}\n\ninterface Payload {\n  types?: ('visitors' | 'header')[];\n  dateRange?: DateRangeValue;\n}\nexport function useAdminReport(payload: Payload = {}) {\n  return useQuery({\n    queryKey: [Endpoint, payload],\n    queryFn: () => fetchAnalyticsReport(payload),\n    placeholderData: keepPreviousData,\n  });\n}\n\nfunction fetchAnalyticsReport({\n  types,\n  dateRange,\n}: Payload): Promise<FetchAnalyticsReportResponse> {\n  const params: Record<string, any> = {};\n  if (types) {\n    params.types = types.join(',');\n  }\n  if (dateRange) {\n    params.startDate = dateRange.start.toAbsoluteString();\n    params.endDate = dateRange.end.toAbsoluteString();\n    params.timezone = dateRange.start.timeZone;\n  }\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\n}\n","import {ReactNode, Ref} from 'react';\nimport clsx from 'clsx';\n\nexport interface ChartLayoutProps {\n  title: ReactNode;\n  description?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  contentIsFlex?: boolean;\n  contentClassName?: string;\n  minHeight?: string;\n  contentRef?: Ref<HTMLDivElement>;\n  isLoading?: boolean;\n}\nexport function ChartLayout(props: ChartLayoutProps) {\n  const {\n    title,\n    description,\n    children,\n    className,\n    contentIsFlex = true,\n    contentClassName,\n    contentRef,\n    minHeight = 'min-h-440',\n  } = props;\n\n  return (\n    <div\n      className={clsx(\n        'rounded-panel flex h-full flex-auto flex-col border bg',\n        minHeight,\n        className,\n      )}\n    >\n      <div className=\"flex flex-shrink-0 items-center justify-between p-14 text-xs\">\n        <div className=\"text-sm font-semibold\">{title}</div>\n        {description && <div className=\"text-muted\">{description}</div>}\n      </div>\n      <div\n        ref={contentRef}\n        className={clsx(\n          'relative p-14',\n          contentIsFlex && 'flex flex-auto items-center justify-center',\n          contentClassName,\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n","import {ProgressCircle} from '@common/ui/progress/progress-circle';\nimport {Trans} from '@common/i18n/trans';\n\nexport function ChartLoadingIndicator() {\n  return (\n    <div className=\"flex items-center gap-10 text-sm absolute mx-auto\">\n      <ProgressCircle isIndeterminate size=\"sm\" />\n      <Trans message=\"Chart loading\" />\n    </div>\n  );\n}\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\nimport {lazy, Suspense} from 'react';\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\n\nconst LazyChart = lazy(() => import('./lazy-chart'));\n\nexport interface BaseChartProps<Type extends ChartType = ChartType>\n  extends Omit<ChartLayoutProps, 'children'> {\n  type: Type;\n  data: ChartData<Type, unknown>;\n  options?: ChartOptions<Type>;\n  hideLegend?: boolean;\n}\nexport function BaseChart<Type extends ChartType = ChartType>(\n  props: BaseChartProps<Type>\n) {\n  const {title, description, className, contentRef, isLoading} = props;\n\n  return (\n    <ChartLayout\n      title={title}\n      description={description}\n      className={className}\n      contentRef={contentRef}\n    >\n      <Suspense fallback={<ChartLoadingIndicator />}>\n        <LazyChart {...props} />\n        {isLoading && <ChartLoadingIndicator />}\n      </Suspense>\n    </ChartLayout>\n  );\n}\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\nimport memoize from 'nano-memoize';\nimport {ChartType} from 'chart.js';\nimport {\n  FormattedDatasetItem,\n  FormattedReportData,\n} from './formatted-dataset-item';\nimport {\n  DatasetItem,\n  RangedDatasetGranularity,\n  ReportMetric,\n} from '../../admin/analytics/report-metric';\nimport {shallowEqual} from '../../utils/shallow-equal';\n\ninterface Options {\n  localeCode: string;\n  shareFirstDatasetLabels?: boolean;\n}\n\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\n\nexport function formatReportData(\n  report: ReportMetric<DatasetItem> | undefined,\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options,\n): FormattedReportData {\n  if (!report) return {datasets: []};\n\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\n\n  return {\n    ...report,\n    datasets: report.datasets.map((dataset, datasetIndex) => {\n      const data = dataset.data.map((datasetItem, itemIndex) => {\n        let label: FormattedDatasetLabels;\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\n          label = generateDatasetLabels(\n            datasetItem,\n            report.granularity,\n            localeCode,\n          );\n          firstDatasetLabels[itemIndex] = label;\n        } else {\n          label = firstDatasetLabels[itemIndex];\n        }\n        return {\n          ...label,\n          value: datasetItem.value,\n        };\n      });\n\n      return {...dataset, data};\n    }),\n  };\n}\n\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\n  datum: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined,\n  locale: string,\n): FormattedDatasetLabels {\n  if (datum.label) {\n    return {label: datum.label};\n  }\n\n  if (!datum.date) {\n    return {label: ''};\n  }\n\n  return generateTimeLabels(datum, granularity, locale);\n}\n\nfunction generateTimeLabels(\n  {date: isoDate, endDate: isoEndDate}: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined = 'day',\n  locale: string,\n): Omit<FormattedDatasetItem, 'value'> {\n  const date = parseAbsoluteToLocal(isoDate!).toDate();\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\n\n  switch (granularity) {\n    case 'minute':\n      return {\n        label: getFormatter(locale, {\n          second: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n          second: '2-digit',\n        }).format(date),\n      };\n    case 'hour':\n      return {\n        label: getFormatter(locale, {\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n      };\n    case 'day':\n      return {\n        label: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n          month: 'short',\n        }).format(date),\n      };\n    case 'week':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          month: 'long',\n          year: 'numeric',\n        }).formatRange(date, endDate as Date),\n      };\n    case 'month':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'long',\n          year: 'numeric',\n        }).format(date),\n      };\n    case 'year':\n      return {\n        label: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n      };\n  }\n}\n\nconst getFormatter = memoize(\n  (locale, options: Intl.DateTimeFormatOptions) => {\n    return new DateFormatter(locale, options);\n  },\n  {\n    equals: (a, b) => {\n      return shallowEqual(a, b);\n    },\n    callTimeout: undefined as any,\n  },\n);\n","import {getBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\n\nconst primaryColor = getBootstrapData().themes.all[0].values['--be-primary'];\nexport const ChartColors = [\n  [\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\n  ],\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\n];\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport clsx from 'clsx';\n\nconst LineChartOptions: ChartOptions<'line'> = {\n  parsing: {\n    xAxisKey: 'label',\n    yAxisKey: 'value',\n  },\n  datasets: {\n    line: {\n      fill: 'origin',\n      tension: 0.1,\n      pointBorderWidth: 4,\n      pointHitRadius: 10,\n    },\n  },\n  plugins: {\n    tooltip: {\n      intersect: false,\n      mode: 'index',\n    },\n  },\n};\n\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\n  data?: ReportMetric<DatasetItem>;\n}\nexport function LineChart({data, className, ...props}: LineChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors[i][1],\n        borderColor: ChartColors[i][0],\n        pointBackgroundColor: ChartColors[i][0],\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      {...props}\n      className={clsx(className, 'min-w-500')}\n      data={formattedData}\n      type=\"line\"\n      options={LineChartOptions}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport clsx from 'clsx';\n\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\n  parsing: {\n    key: 'value',\n  },\n  plugins: {\n    tooltip: {\n      intersect: true,\n    },\n  },\n};\n\ninterface PolarAreaChartProps\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\n  data?: ReportMetric<DatasetItem>;\n}\nexport function PolarAreaChart({\n  data,\n  className,\n  ...props\n}: PolarAreaChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors.map(c => c[1]),\n        borderColor: ChartColors.map(c => c[0]),\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      type=\"polarArea\"\n      data={formattedData}\n      options={PolarAreaChartOptions}\n      className={clsx(className, 'min-w-500')}\n      {...props}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\nimport clsx from 'clsx';\n\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\n  direction?: 'horizontal' | 'vertical';\n  individualBarColors?: boolean;\n  data?: ReportMetric<DatasetItem>;\n}\nexport function BarChart({\n  data,\n  direction = 'vertical',\n  individualBarColors = false,\n  className,\n  ...props\n}: BarChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: individualBarColors\n          ? ChartColors.map(c => c[1])\n          : ChartColors[i][1],\n        borderColor: individualBarColors\n          ? ChartColors.map(c => c[0])\n          : ChartColors[i][0],\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode, individualBarColors]);\n\n  const isHorizontal = direction === 'horizontal';\n  const options: ChartOptions<'bar'> = useMemo(() => {\n    return {\n      indexAxis: isHorizontal ? 'y' : 'x',\n      parsing: {\n        xAxisKey: isHorizontal ? 'value' : 'label',\n        yAxisKey: isHorizontal ? 'label' : 'value',\n      },\n    };\n  }, [isHorizontal]);\n\n  return (\n    <BaseChart\n      type=\"bar\"\n      className={clsx(className, 'min-w-500')}\n      data={formattedData}\n      options={options}\n      {...props}\n    />\n  );\n}\n","import {parseColor} from '@react-stately/color';\n\nexport function themeValueToHex(value: string): string {\n  try {\n    return parseColor(`rgb(${value.split(' ').join(',')})`).toString('hex');\n  } catch (e) {\n    return value;\n  }\n}\n","import lazyLoader from '../../../utils/http/lazy-loader';\nimport {useSettings} from '@common/core/settings/use-settings';\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\nimport {useThemeSelector} from '@common/ui/themes/theme-selector-context';\nimport {themeValueToHex} from '@common/ui/themes/utils/theme-value-to-hex';\nimport {useTrans} from '@common/i18n/use-trans';\nimport {message} from '@common/i18n/message';\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\n\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\n\ninterface UseGoogleGeoChartProps {\n  placeholderRef: RefObject<HTMLDivElement>;\n  data: LocationDatasetItem[];\n  onCountrySelected?: (countryCode: string) => void;\n  country?: string;\n}\nexport function useGoogleGeoChart({\n  placeholderRef,\n  data,\n  country,\n  onCountrySelected,\n}: UseGoogleGeoChartProps) {\n  const {trans} = useTrans();\n  const {analytics} = useSettings();\n  const apiKey = analytics?.gchart_api_key;\n  const {selectedTheme} = useThemeSelector();\n  const geoChartRef = useRef<google.visualization.GeoChart>();\n  // only allow selecting countries, not cities\n  const regionInteractivity = !!onCountrySelected && !country;\n  const drawGoogleChart = useCallback(() => {\n    if (typeof google === 'undefined') return;\n\n    const seedData = data.map(location => [location.label, location.value]);\n    seedData.unshift([\n      country ? trans(message('City')) : trans(message('Country')),\n      trans(message('Clicks')),\n    ]);\n\n    const backgroundColor = `${themeValueToHex(\n      selectedTheme.values['--be-paper'],\n    )}`;\n    const chartColor = `${themeValueToHex(\n      selectedTheme.values['--be-primary'],\n    )}`;\n\n    const options: google.visualization.GeoChartOptions = {\n      colorAxis: {colors: [chartColor]},\n      backgroundColor,\n      region: country ? country.toUpperCase() : undefined,\n      resolution: country ? 'provinces' : 'countries',\n      displayMode: country ? 'markers' : 'regions',\n      enableRegionInteractivity: regionInteractivity,\n    };\n\n    if (\n      !geoChartRef.current &&\n      placeholderRef.current &&\n      google?.visualization?.GeoChart\n    ) {\n      geoChartRef.current = new google.visualization.GeoChart(\n        placeholderRef.current,\n      );\n    }\n    geoChartRef.current?.draw(\n      google.visualization.arrayToDataTable(seedData),\n      options,\n    );\n  }, [\n    selectedTheme,\n    data,\n    placeholderRef,\n    trans,\n    country,\n    regionInteractivity,\n  ]);\n\n  const initGoogleGeoChart = useCallback(async () => {\n    if (lazyLoader.isLoadingOrLoaded(loaderUrl)) return;\n    await lazyLoader.loadAsset(loaderUrl, {type: 'js', id: 'google-charts-js'});\n    await google.charts.load('current', {\n      packages: ['geochart'],\n      mapsApiKey: apiKey,\n    });\n    drawGoogleChart();\n  }, [apiKey, drawGoogleChart]);\n\n  useEffect(() => {\n    if (geoChartRef.current && onCountrySelected) {\n      google.visualization.events.addListener(\n        geoChartRef.current,\n        'regionClick',\n        (a: {region: string}) => onCountrySelected?.(a.region),\n      );\n    }\n\n    return () => {\n      if (geoChartRef.current) {\n        google.visualization.events.removeAllListeners(geoChartRef.current);\n      }\n    };\n    // this will correctly run when geochart instance is set on ref\n  }, [onCountrySelected, geoChartRef.current]);\n\n  // on component load: load chart library then draw, otherwise just draw\n  useEffect(() => {\n    initGoogleGeoChart();\n  }, [initGoogleGeoChart]);\n\n  // redraw chart if data or theme changes\n  useEffect(() => {\n    drawGoogleChart();\n  }, [selectedTheme, drawGoogleChart, data]);\n\n  return {drawGoogleChart};\n}\n","import {createSvgIcon} from '@common/icons/create-svg-icon';\n\nexport const InfoDialogTriggerIcon = createSvgIcon(\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\n  'InfoDialogTrigger'\n);\n","import {IconButton} from '@common/ui/buttons/icon-button';\nimport {InfoDialogTriggerIcon} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\nimport {Dialog, DialogSize} from '@common/ui/overlays/dialog/dialog';\nimport {DialogHeader} from '@common/ui/overlays/dialog/dialog-header';\nimport {DialogBody} from '@common/ui/overlays/dialog/dialog-body';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport React, {ReactNode} from 'react';\nimport clsx from 'clsx';\n\ninterface InfoDialogTriggerProps {\n  title?: ReactNode;\n  body: ReactNode;\n  dialogSize?: DialogSize;\n  className?: string;\n}\nexport function InfoDialogTrigger({\n  title,\n  body,\n  dialogSize = 'sm',\n  className,\n}: InfoDialogTriggerProps) {\n  return (\n    <DialogTrigger type=\"popover\" triggerOnHover>\n      <IconButton\n        className={clsx('text-muted opacity-70', className)}\n        size=\"xs\"\n      >\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\n      </IconButton>\n      <Dialog size={dialogSize}>\n        {title && (\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\n            {title}\n          </DialogHeader>\n        )}\n        <DialogBody>{body}</DialogBody>\n      </Dialog>\n    </DialogTrigger>\n  );\n}\n","import {useSelectedLocale} from '@common/i18n/selected-locale';\nimport {Fragment, memo} from 'react';\n\ninterface Props {\n  code: string;\n}\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\n  const {localeCode} = useSelectedLocale();\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\n  let formattedName: string | undefined;\n\n  try {\n    formattedName = regionNames.of(countryCode.toUpperCase());\n  } catch (e) {}\n\n  return <Fragment>{formattedName}</Fragment>;\n});\n","import {\n  LocationDatasetItem,\n  ReportMetric,\n} from '@common/admin/analytics/report-metric';\nimport React, {useMemo, useRef} from 'react';\nimport {useGoogleGeoChart} from './use-google-geo-chart';\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\nimport {Trans} from '@common/i18n/trans';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\nimport {Button} from '@common/ui/buttons/button';\nimport {ArrowBackIcon} from '@common/icons/material/ArrowBack';\nimport clsx from 'clsx';\nimport {InfoDialogTrigger} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\nimport {FormattedCountryName} from '@common/i18n/formatted-country-name';\n\ninterface GeoChartData extends Partial<ChartLayoutProps> {\n  data?: ReportMetric<LocationDatasetItem>;\n  onCountrySelected?: (countryCode: string | undefined) => void;\n  country?: string;\n}\nexport function GeoChart({\n  data: metricData,\n  isLoading,\n  onCountrySelected,\n  country,\n  ...layoutProps\n}: GeoChartData) {\n  const placeholderRef = useRef<HTMLDivElement>(null);\n  const regionInteractivity = !!onCountrySelected;\n\n  // memo data to avoid redrawing chart on rerender\n  const initialData = metricData?.datasets[0].data;\n  const data = useMemo(() => {\n    return initialData || [];\n  }, [initialData]);\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\n\n  return (\n    <ChartLayout\n      {...layoutProps}\n      className=\"min-w-500\"\n      title={\n        <div className=\"flex items-center\">\n          <Trans message=\"Top Locations\" />\n          {country ? (\n            <span className=\"pl-4\">\n              ({<FormattedCountryName code={country} />})\n            </span>\n          ) : null}\n          {regionInteractivity && <InfoTrigger />}\n        </div>\n      }\n      contentIsFlex={isLoading}\n    >\n      {isLoading && <ChartLoadingIndicator />}\n      <div className=\"flex gap-24\">\n        <div\n          ref={placeholderRef}\n          className=\"flex-auto w-[480px] min-h-[340px]\"\n        />\n        <div className=\"w-[170px]\">\n          <div className=\"text-sm max-h-[340px] w-full flex-initial overflow-y-auto\">\n            {data.map(location => (\n              <div\n                key={location.label}\n                className={clsx(\n                  'flex items-center gap-4 mb-4',\n                  regionInteractivity && 'cursor-pointer hover:underline'\n                )}\n                role={regionInteractivity ? 'button' : undefined}\n                onClick={() => {\n                  onCountrySelected?.(location.code);\n                }}\n              >\n                <div className=\"max-w-110 whitespace-nowrap overflow-hidden overflow-ellipsis\">\n                  {location.label}\n                </div>\n                <div>({location.percentage})%</div>\n              </div>\n            ))}\n          </div>\n          {country && (\n            <Button\n              variant=\"outline\"\n              size=\"xs\"\n              className=\"mt-14\"\n              startIcon={<ArrowBackIcon />}\n              onClick={() => {\n                onCountrySelected?.(undefined);\n              }}\n            >\n              <Trans message=\"Back to countries\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </ChartLayout>\n  );\n}\n\nfunction InfoTrigger() {\n  return (\n    <InfoDialogTrigger\n      title={<Trans message=\"Zooming in\" />}\n      body={\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\n      }\n    />\n  );\n}\n","import React, {Fragment} from 'react';\nimport {LineChart} from '@common/charts/line-chart';\nimport {Trans} from '@common/i18n/trans';\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\nimport {BarChart} from '@common/charts/bar-chart';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {FormattedNumber} from '@common/i18n/formatted-number';\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\n\nexport const AdminReportPageColGap = 'gap-12 md:gap-24 mb-12 md:mb-24';\nconst rowClassName = `flex flex-col md:flex-row md:items-center overflow-x-auto ${AdminReportPageColGap}`;\n\ninterface AdminReportChartsProps {\n  report?: VisitorsReportData;\n  isLoading: boolean;\n}\nexport function VisitorsReportCharts({\n  report,\n  isLoading,\n}: AdminReportChartsProps) {\n  const totalViews = report?.pageViews.total;\n  return (\n    <Fragment>\n      <div className={rowClassName}>\n        <LineChart\n          isLoading={isLoading}\n          className=\"flex-auto\"\n          data={report?.pageViews}\n          title={<Trans message=\"Pageviews\" />}\n          description={\n            totalViews ? (\n              <Trans\n                message=\":count total views\"\n                values={{count: <FormattedNumber value={totalViews} />}}\n              />\n            ) : null\n          }\n        />\n        <PolarAreaChart\n          isLoading={isLoading}\n          data={report?.devices}\n          title={<Trans message=\"Top devices\" />}\n        />\n      </div>\n      <div className={rowClassName}>\n        <BarChart\n          isLoading={isLoading}\n          data={report?.browsers}\n          className=\"flex-auto md:w-1/3\"\n          direction=\"horizontal\"\n          individualBarColors\n          hideLegend\n          title={<Trans message=\"Top browsers\" />}\n        />\n        <GeoChart\n          isLoading={isLoading}\n          className=\"flex-auto\"\n          data={report?.locations}\n          title={<Trans message=\"Top locations\" />}\n        />\n      </div>\n    </Fragment>\n  );\n}\n","import {HeaderDatum} from '@common/admin/analytics/use-admin-report';\nimport React, {\n  cloneElement,\n  Fragment,\n  isValidElement,\n  ReactElement,\n} from 'react';\nimport {TrendingUpIcon} from '@common/icons/material/TrendingUp';\nimport {TrendingDownIcon} from '@common/icons/material/TrendingDown';\nimport {createSvgIconFromTree} from '@common/icons/create-svg-icon';\nimport {AdminReportPageColGap} from '@common/admin/analytics/visitors-report-charts';\nimport {FormattedNumber} from '@common/i18n/formatted-number';\nimport {FormattedBytes} from '@common/uploads/formatted-bytes';\nimport {TrendingFlatIcon} from '@common/icons/material/TrendingFlat';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {opacityAnimation} from '@common/ui/animation/opacity-animation';\nimport {Skeleton} from '@common/ui/skeleton/skeleton';\n\ninterface AdminHeaderReportProps {\n  report?: HeaderDatum[];\n  isLoading?: boolean;\n}\nexport function AdminHeaderReport({report, isLoading}: AdminHeaderReportProps) {\n  return (\n    <div\n      className={`flex h-[97px] flex-shrink-0 items-center overflow-x-auto ${AdminReportPageColGap}`}\n    >\n      {report?.map(datum => (\n        <ReportItem key={datum.name} datum={datum} isLoading={isLoading} />\n      ))}\n    </div>\n  );\n}\n\ninterface ValueMetricItemProps {\n  datum: HeaderDatum;\n  isLoading?: boolean;\n}\nfunction ReportItem({datum, isLoading = false}: ValueMetricItemProps) {\n  let icon;\n  if (isValidElement(datum.icon)) {\n    icon = cloneElement(datum.icon, {size: 'lg'});\n  } else {\n    const IconEl = createSvgIconFromTree(datum.icon);\n    icon = <IconEl size=\"lg\" />;\n  }\n\n  return (\n    <div\n      key={datum.name}\n      className=\"rounded-panel flex h-full flex-auto items-center gap-18 whitespace-nowrap border p-20\"\n    >\n      <div className=\"flex-shrink-0 rounded-lg bg-primary-light/20 p-10 text-primary\">\n        {icon}\n      </div>\n      <div className=\"flex-auto\">\n        <div className=\"flex items-center justify-between gap-20\">\n          <div className=\"text-lg font-bold text-main\">\n            <AnimatePresence initial={false} mode=\"wait\">\n              {isLoading ? (\n                <m.div key=\"skeleton\" {...opacityAnimation}>\n                  <Skeleton className=\"min-w-24\" />\n                </m.div>\n              ) : (\n                <m.div key=\"value\" {...opacityAnimation}>\n                  <FormattedValue datum={datum} />\n                </m.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between gap-20\">\n          <h2 className=\"text-sm text-muted\">{datum.name}</h2>\n          {(datum.percentageChange != null || datum.previousValue != null) && (\n            <div className=\"flex items-center gap-10\">\n              <TrendingIndicator datum={datum} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface FormattedValueProps {\n  datum: HeaderDatum;\n}\nfunction FormattedValue({datum}: FormattedValueProps) {\n  switch (datum.type) {\n    case 'fileSize':\n      return <FormattedBytes bytes={datum.currentValue} />;\n    case 'percentage':\n      return (\n        <FormattedNumber\n          value={datum.currentValue}\n          style=\"percent\"\n          maximumFractionDigits={1}\n        />\n      );\n    default:\n      return <FormattedNumber value={datum.currentValue} />;\n  }\n}\n\ninterface TrendingIndicatorProps {\n  datum: HeaderDatum;\n}\nfunction TrendingIndicator({datum}: TrendingIndicatorProps) {\n  const percentage = calculatePercentage(datum);\n  let icon: ReactElement;\n  if (percentage > 0) {\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\n  } else if (percentage === 0) {\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\n  } else {\n    icon = <TrendingDownIcon className=\"text-danger\" />;\n  }\n\n  return (\n    <Fragment>\n      {icon}\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\n    </Fragment>\n  );\n}\n\nfunction calculatePercentage({\n  percentageChange,\n  previousValue,\n  currentValue,\n}: HeaderDatum) {\n  if (\n    percentageChange != null ||\n    previousValue == null ||\n    currentValue == null\n  ) {\n    return percentageChange ?? 0;\n  }\n\n  if (previousValue === 0) {\n    return 100;\n  }\n\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\n}\n","import {useDateRangePickerState} from '@common/ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport {Button} from '@common/ui/buttons/button';\nimport {DateRangeIcon} from '@common/icons/material/DateRange';\nimport {FormattedDateTimeRange} from '@common/i18n/formatted-date-time-range';\nimport {DateRangeDialog} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\nimport React from 'react';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {useIsMobileMediaQuery} from '@common/utils/hooks/is-mobile-media-query';\nimport {DateFormatPresets} from '@common/i18n/formatted-date';\nimport {DateRangeComparePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-compare-presets';\nimport {Granularity} from '@common/ui/forms/input-field/date/date-picker/use-date-picker-state';\n\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: '2-digit',\n};\n\ninterface ReportDataSelectorProps {\n  value: DateRangeValue;\n  disabled?: boolean;\n  onChange: (value: DateRangeValue) => void;\n  compactOnMobile?: boolean;\n  enableCompare?: boolean;\n  granularity?: Granularity;\n}\nexport function ReportDateSelector({\n  value,\n  onChange,\n  disabled,\n  compactOnMobile = true,\n  enableCompare = false,\n  granularity = 'minute',\n}: ReportDataSelectorProps) {\n  const isMobile = useIsMobileMediaQuery();\n  return (\n    <DialogTrigger\n      type=\"popover\"\n      onClose={value => {\n        if (value) {\n          onChange(value);\n        }\n      }}\n    >\n      <Button\n        variant=\"outline\"\n        color=\"chip\"\n        endIcon={<DateRangeIcon />}\n        disabled={disabled}\n      >\n        <FormattedDateTimeRange\n          start={value.start}\n          end={value.end}\n          options={\n            isMobile && compactOnMobile\n              ? monthDayFormat\n              : DateFormatPresets.short\n          }\n        />\n      </Button>\n      <DateSelectorDialog\n        value={value}\n        enableCompare={enableCompare}\n        granularity={granularity}\n      />\n    </DialogTrigger>\n  );\n}\n\ninterface DateSelectorDialogProps {\n  value: DateRangeValue;\n  enableCompare: boolean;\n  granularity: Granularity;\n}\nfunction DateSelectorDialog({\n  value,\n  enableCompare,\n  granularity,\n}: DateSelectorDialogProps) {\n  const isMobile = useIsMobileMediaQuery();\n  const state = useDateRangePickerState({\n    granularity,\n    defaultValue: {\n      start: value.start,\n      end: value.end,\n      preset: value.preset,\n    },\n    closeDialogOnSelection: false,\n  });\n  const compareHasInitialValue = !!value.compareStart && !!value.compareEnd;\n  const compareState = useDateRangePickerState({\n    granularity,\n    defaultValue: compareHasInitialValue\n      ? {\n          start: value.compareStart,\n          end: value.compareEnd,\n          preset: value.comparePreset,\n        }\n      : DateRangeComparePresets[0].getRangeValue(state.selectedValue),\n  });\n  return (\n    <DateRangeDialog\n      state={state}\n      compareState={enableCompare ? compareState : undefined}\n      compareVisibleDefault={compareHasInitialValue}\n      showInlineDatePickerField={!isMobile}\n    />\n  );\n}\n","import React, {useState} from 'react';\nimport {useAdminReport} from './use-admin-report';\nimport {Trans} from '../../i18n/trans';\nimport {StaticPageTitle} from '../../seo/static-page-title';\nimport {AdminHeaderReport} from '@common/admin/analytics/admin-header-report';\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {DateRangePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\n\nexport default function AdminReportPage() {\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\n    // This week\n    return DateRangePresets[2].getRangeValue();\n  });\n  const {isLoading, data} = useAdminReport({dateRange});\n  const title = <Trans message=\"Visitors report\" />;\n\n  return (\n    <div className=\"min-h-full gap-12 overflow-x-hidden p-12 md:gap-24 md:p-24\">\n      <div className=\"mb-24 items-center justify-between gap-24 md:flex\">\n        <StaticPageTitle>{title}</StaticPageTitle>\n        <h1 className=\"mb-24 text-3xl font-light md:mb-0\">{title}</h1>\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\n      </div>\n      <AdminHeaderReport report={data?.headerReport} />\n      <VisitorsReportCharts\n        report={data?.visitorsReport}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n"],"file":"assets/admin-report-page-a59af767.js"}